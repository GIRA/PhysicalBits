(ns middleware.vm-test-files-gen
  (:require [clojure.test :refer :all]
            [middleware.device.controller :as dc]
            [middleware.compiler.encoder :as en]
            [middleware.compiler.emitter :as emit]
            [clojure.string :as str])
  (:use [middleware.test-utils]))

; NOTE(Richo): These tests were autogenerated from Squeak code. They are currently
; used as a way to check that the clojure encoder works *exactly* the same as the
; Squeak encoder. They also produce the input programs for the VM tests.

(def output-path "../../firmware/Simulator/SimulatorTest/TestFiles/")

(defn write-file [program]
  (let [file-name (str output-path (test-name))
        bytes (dc/run {:compiled program})]
    (spit file-name (str/join ", " bytes))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; NOTE(Richo): Autogenerated code begins here...

(deftest Test001TurnOnBytecode
  (let [expected [1 0 128 1 13]
        program (emit/program
                    :globals #{(emit/constant 0)}
                    :scripts [(emit/script
                                    :name "test"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/turn-on-pin 13)])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test002TurnOffBytecode
  (let [expected [1 0 128 1 45]
        program (emit/program
                    :globals #{(emit/constant 0)}
                    :scripts [(emit/script
                                    :name "test"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/turn-off-pin 13)])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test003ReadWriteBytecode
  (let [expected [1 0 128 2 111 77]
        program (emit/program
                    :globals #{(emit/constant 0)}
                    :scripts [(emit/script
                                    :name "test"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-pin 15)
                                                    (emit/write-pin 13)])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test004PushBytecode
  (let [expected [1 0 128 2 129 77]
        program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 1)}
                    :scripts [(emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 1)
                                                    (emit/write-pin 13)])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test005PushWithFloatingPointVariable
  (let [expected [1 1 7 62 76 204 205 128 2 131 77]
        program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 0.2)}
                    :scripts [(emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 0.2)
                                                    (emit/write-pin 13)])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test006PopBytecode
  (let [expected [1 1 4 0 128 4 131 77 129 147]
        program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/variable "a" 0)
                                (emit/constant 1)}
                    :scripts [(emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-global "a")
                                                    (emit/write-pin 13)
                                                    (emit/push-value 1)
                                                    (emit/write-global "a")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test007PrimBytecode
  (let [expected [1 1 4 13 128 2 131 162]
        program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)}
                    :scripts [(emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test008JZBytecode
  (let [expected [1 0 128 5 109 241 2 45 240 1 13]
        program (emit/program
                    :globals #{(emit/constant 0)}
                    :scripts [(emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-pin 13)
                                                    (emit/jz 2)
                                                    (emit/turn-off-pin 13)
                                                    (emit/jmp 1)
                                                    (emit/turn-on-pin 13)])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test009TickingRate
  (let [expected [1 2 4 13 5 3 232 192 4 2 131 162]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 13)}
                    :scripts [(emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test010MultipleScriptsWithDifferentTickingRates
  (let [expected [2 3 8 13 100 5 3 232 192 5 2 131 162 192 4 2 111 73]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 13)
                                (emit/constant 100)}
                    :scripts [(emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "pot"
                                    :running? true
                                    :delay 100
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-pin 15)
                                                    (emit/write-pin 9)])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test011YieldInstruction
  (let [expected [1 0 128 3 13 182 45]
        program (emit/program
                    :globals #{(emit/constant 0)}
                    :scripts [(emit/script
                                    :name "yieldTest"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/turn-on-pin 13)
                                                    (emit/prim-call "yield")
                                                    (emit/turn-off-pin 13)])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test012YieldInstructionPreservesStack
  (let [expected [1 2 8 12 13 128 10 132 162 132 182 162 131 129 182 166 162]
        program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)
                                (emit/constant 12)
                                (emit/constant 1)}
                    :scripts [(emit/script
                                    :name "yieldTest"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "yield")
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 12)
                                                    (emit/push-value 1)
                                                    (emit/prim-call "yield")
                                                    (emit/prim-call "add")
                                                    (emit/prim-call "toggle")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test013YieldInstructionResumesOnNextTick
  (let [expected [1 1 5 3 232 192 3 3 12 182 44]
        program (emit/program
                    :globals #{(emit/constant 1000)}
                    :scripts [(emit/script
                                    :name "yieldTest"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/turn-on-pin 12)
                                                    (emit/prim-call "yield")
                                                    (emit/turn-off-pin 12)])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test014PrimitiveYieldTime
  (let [expected [1 2 4 100 5 3 232 192 3 4 13 132 183 45]
        program (emit/program
                    :globals #{(emit/constant 100)
                                (emit/constant 1000)}
                    :scripts [(emit/script
                                    :name "yieldTest"
                                    :running? true
                                    :delay 100
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/turn-on-pin 13)
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "delayMs")
                                                    (emit/turn-off-pin 13)])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test015YieldAfterBackwardsJump
  (let [expected [2 3 8 11 13 5 3 232 192 5 2 131 162 128 6 132 162 111 241 254 111 242 254]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 11)
                                (emit/constant 0)
                                (emit/constant 13)}
                    :scripts [(emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 11)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "main"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/read-pin 15)
                                                    (emit/jz -2)
                                                    (emit/read-pin 15)
                                                    (emit/jnz -2)])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test016ScriptCallWithoutParametersOrReturnValue
  (let [expected [2 3 8 10 11 5 3 232 0 4 131 162 185 13 192 5 4 192 186 132 162]
        program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 10)
                                (emit/constant 1000)
                                (emit/constant 11)}
                    :scripts [(emit/script
                                    :name "toggle"
                                    :running? false
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 10)
                                                    (emit/prim-call "toggle")
                                                    (emit/prim-call "ret")
                                                    (emit/turn-on-pin 13)])
                                (emit/script
                                    :name "loop"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/script-call "toggle")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 11)
                                                    (emit/prim-call "toggle")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test017ScriptCallWithoutParametersWithReturnValueAndExplicitReturn
  (let [expected [2 3 12 5 13 100 0 8 131 129 166 147 131 187 132 162 192 5 4 192 133 167 75]
        program (emit/program
                    :globals #{(emit/variable "counter" 5)
                                (emit/constant 0)
                                (emit/constant 1)
                                (emit/constant 13)
                                (emit/constant 100)}
                    :scripts [(emit/script
                                    :name "incr"
                                    :running? false
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-global "counter")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "add")
                                                    (emit/write-global "counter")
                                                    (emit/read-global "counter")
                                                    (emit/prim-call "retv")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "loop"
                                    :running? true
                                    :delay 100
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/script-call "incr")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "divide")
                                                    (emit/write-pin 11)])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test018ScriptTickingWithExplicitReturn
  (let [expected [1 3 12 0 11 13 192 1 10 133 162 131 129 166 147 131 187 132 162]
        program (emit/program
                    :globals #{(emit/constant 1)
                                (emit/constant 13)
                                (emit/variable "counter" 0)
                                (emit/constant 11)}
                    :scripts [(emit/script
                                    :name "incr"
                                    :running? true
                                    :delay 1
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/read-global "counter")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "add")
                                                    (emit/write-global "counter")
                                                    (emit/read-global "counter")
                                                    (emit/prim-call "retv")
                                                    (emit/push-value 11)
                                                    (emit/prim-call "toggle")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test019ScriptWithYieldBeforeEndOfScript
  (let [expected [2 2 8 11 100 0 2 131 162 128 4 192 186 132 183]
        program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 11)
                                (emit/constant 100)}
                    :scripts [(emit/script
                                    :name "blink11"
                                    :running? false
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 11)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "main"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/script-call "blink11")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test020ScriptCallWithOneParameterAndReturnValue
  (let [expected [3 3 4 11 5 3 232 6 152 150 128 192 4 2 194 186 32 1 6 129 255 0 168 187 131 162 64 5 3 109 193 77]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 0)
                                (emit/constant 1)
                                (emit/constant 11)
                                (emit/constant 10000000)}
                    :scripts [(emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/script-call "main")
                                                    (emit/prim-call "pop")])
                                (emit/script
                                    :name "toggle"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "n" 0)]
                                    :locals []
                                    :instructions [(emit/push-value 1)
                                                    (emit/read-local "n")
                                                    (emit/prim-call "subtract")
                                                    (emit/prim-call "retv")
                                                    (emit/push-value 11)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "main"
                                    :running? false
                                    :delay 10000000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-pin 13)
                                                    (emit/script-call "toggle")
                                                    (emit/write-pin 13)])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test021ScriptCallWithOneParameterWithoutReturnValue
  (let [expected [3 2 5 3 232 6 152 150 128 192 3 2 194 186 32 1 4 129 255 0 168 77 64 4 3 109 193 186]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 0)
                                (emit/constant 1)
                                (emit/constant 10000000)}
                    :scripts [(emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/script-call "main")
                                                    (emit/prim-call "pop")])
                                (emit/script
                                    :name "toggle"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "n" 0)]
                                    :locals []
                                    :instructions [(emit/push-value 1)
                                                    (emit/read-local "n")
                                                    (emit/prim-call "subtract")
                                                    (emit/write-pin 13)])
                                (emit/script
                                    :name "main"
                                    :running? false
                                    :delay 10000000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-pin 13)
                                                    (emit/script-call "toggle")
                                                    (emit/prim-call "pop")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test022ScriptCallWithOneParameterWithoutReturnValueWithExplicitReturn
  (let [expected [3 2 5 3 232 6 152 150 128 192 3 2 194 186 32 1 6 129 255 0 168 77 185 11 64 4 3 109 193 75]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 0)
                                (emit/constant 1)
                                (emit/constant 10000000)}
                    :scripts [(emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/script-call "main")
                                                    (emit/prim-call "pop")])
                                (emit/script
                                    :name "toggle"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "n" 0)]
                                    :locals []
                                    :instructions [(emit/push-value 1)
                                                    (emit/read-local "n")
                                                    (emit/prim-call "subtract")
                                                    (emit/write-pin 13)
                                                    (emit/prim-call "ret")
                                                    (emit/turn-on-pin 11)])
                                (emit/script
                                    :name "main"
                                    :running? false
                                    :delay 10000000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-pin 13)
                                                    (emit/script-call "toggle")
                                                    (emit/write-pin 11)])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test023ScriptCallWithTwoParametersWithoutReturnValueWithExplicitReturn
  (let [expected [3 2 5 3 232 6 152 150 128 192 3 2 194 186 32 2 6 255 0 255 1 168 77 185 11 64 4 4 129 109 193 75]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 0)
                                (emit/constant 10000000)
                                (emit/constant 1)}
                    :scripts [(emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/script-call "main")
                                                    (emit/prim-call "pop")])
                                (emit/script
                                    :name "toggle"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "a" 0)
                                                (emit/variable "b" 0)]
                                    :locals []
                                    :instructions [(emit/read-local "a")
                                                    (emit/read-local "b")
                                                    (emit/prim-call "subtract")
                                                    (emit/write-pin 13)
                                                    (emit/prim-call "ret")
                                                    (emit/turn-on-pin 11)])
                                (emit/script
                                    :name "main"
                                    :running? false
                                    :delay 10000000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 1)
                                                    (emit/read-pin 13)
                                                    (emit/script-call "toggle")
                                                    (emit/write-pin 11)])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test024ScriptCallWithTwoParametersWithReturnValue
  (let [expected [3 3 4 11 5 3 232 6 152 150 128 192 4 2 194 186 32 2 8 255 0 255 0 255 1 168 165 187 131 162 64 5 4 129 109 193 77]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 0)
                                (emit/constant 11)
                                (emit/constant 10000000)
                                (emit/constant 1)}
                    :scripts [(emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/script-call "main")
                                                    (emit/prim-call "pop")])
                                (emit/script
                                    :name "toggle"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "a" 0)
                                                (emit/variable "b" 0)]
                                    :locals []
                                    :instructions [(emit/read-local "a")
                                                    (emit/read-local "a")
                                                    (emit/read-local "b")
                                                    (emit/prim-call "subtract")
                                                    (emit/prim-call "multiply")
                                                    (emit/prim-call "retv")
                                                    (emit/push-value 11)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "main"
                                    :running? false
                                    :delay 10000000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 1)
                                                    (emit/read-pin 13)
                                                    (emit/script-call "toggle")
                                                    (emit/write-pin 13)])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test025ScriptCallWithRecursiveCall4LevelsDeep
  (let [expected [2 4 12 0 4 42 5 3 232 32 1 12 255 0 128 170 241 3 133 187 240 5 255 0 129 168 192 187 192 6 5 132 192 147 131 77]
        program (emit/program
                    :globals #{(emit/variable "c" 0)
                                (emit/constant 0)
                                (emit/constant 42)
                                (emit/constant 1)
                                (emit/constant 1000)
                                (emit/constant 4)}
                    :scripts [(emit/script
                                    :name "foo"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "n" 0)]
                                    :locals []
                                    :instructions [(emit/read-local "n")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 3)
                                                    (emit/push-value 42)
                                                    (emit/prim-call "retv")
                                                    (emit/jmp 5)
                                                    (emit/read-local "n")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "subtract")
                                                    (emit/script-call "foo")
                                                    (emit/prim-call "retv")])
                                (emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 4)
                                                    (emit/script-call "foo")
                                                    (emit/write-global "c")
                                                    (emit/read-global "c")
                                                    (emit/write-pin 13)])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test026ScriptTickingThatAlsoCallsItself
  (let [expected [2 8 24 0 0 2 9 11 13 9 1 0 3 232 224 10 1 19 255 0 241 15 255 0 129 170 241 3 133 187 240 7 133 255 0 129 168 192 165 187 240 2 136 162 128 18 134 160 241 253 134 160 242 253 131 129 166 147 131 192 137 167 148 135 132 161]
        program (emit/program
                    :globals #{(emit/variable "result" 0)
                                (emit/variable "counter" 0)
                                (emit/constant 1000)
                                (emit/constant 1)
                                (emit/constant 2)
                                (emit/constant 13)
                                (emit/constant 0)
                                (emit/constant 9)
                                (emit/constant 256)
                                (emit/constant 11)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments [(emit/variable "call" 0)]
                                    :locals []
                                    :instructions [(emit/read-local "call")
                                                    (emit/jz 15)
                                                    (emit/read-local "call")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 3)
                                                    (emit/push-value 2)
                                                    (emit/prim-call "retv")
                                                    (emit/jmp 7)
                                                    (emit/push-value 2)
                                                    (emit/read-local "call")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "subtract")
                                                    (emit/script-call "main")
                                                    (emit/prim-call "multiply")
                                                    (emit/prim-call "retv")
                                                    (emit/jmp 2)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "button"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 9)
                                                    (emit/prim-call "read")
                                                    (emit/jz -3)
                                                    (emit/push-value 9)
                                                    (emit/prim-call "read")
                                                    (emit/jnz -3)
                                                    (emit/read-global "counter")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "add")
                                                    (emit/write-global "counter")
                                                    (emit/read-global "counter")
                                                    (emit/script-call "main")
                                                    (emit/push-value 256)
                                                    (emit/prim-call "divide")
                                                    (emit/write-global "result")
                                                    (emit/push-value 11)
                                                    (emit/read-global "result")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test027PrimitiveCoroutineShouldReturnTheIndexOfTheActiveScript
  (let [expected [3 2 4 11 5 3 232 128 6 194 186 132 183 209 224 0 6 194 186 132 183 208 225 0 3 131 188 161]
        program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 1000)
                                (emit/constant 11)}
                    :scripts [(emit/script
                                    :name "foo"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/script-call "writeCoroutine")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "delayMs")
                                                    (emit/start "bar")
                                                    (emit/stop "foo")])
                                (emit/script
                                    :name "bar"
                                    :running? false
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/script-call "writeCoroutine")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "delayMs")
                                                    (emit/start "foo")
                                                    (emit/stop "bar")])
                                (emit/script
                                    :name "writeCoroutine"
                                    :running? false
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 11)
                                                    (emit/prim-call "coroutine")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test028PrimitiveBitwiseAnd
  (let [expected [1 5 16 0 7 10 11 5 3 232 192 7 11 134 131 132 191 133 167 161 131 129 166 147]
        program (emit/program
                    :globals #{(emit/variable "n" 0)
                                (emit/constant 1000)
                                (emit/constant 11)
                                (emit/constant 7)
                                (emit/constant 10)
                                (emit/constant 1)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 11)
                                                    (emit/read-global "n")
                                                    (emit/push-value 7)
                                                    (emit/prim-call "bitwiseAnd")
                                                    (emit/push-value 10)
                                                    (emit/prim-call "divide")
                                                    (emit/prim-call "write")
                                                    (emit/read-global "n")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "add")
                                                    (emit/write-global "n")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test029PrimitiveBitwiseOr
  (let [expected [1 4 12 0 11 100 5 3 232 192 6 11 132 131 129 250 0 133 167 161 131 129 166 147]
        program (emit/program
                    :globals #{(emit/variable "n" 0)
                                (emit/constant 1000)
                                (emit/constant 11)
                                (emit/constant 1)
                                (emit/constant 100)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 11)
                                                    (emit/read-global "n")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "bitwiseOr")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "divide")
                                                    (emit/prim-call "write")
                                                    (emit/read-global "n")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "add")
                                                    (emit/write-global "n")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test030PrimitiveLogicalAnd
  (let [expected [1 3 8 11 13 5 3 232 192 5 9 129 128 189 241 3 132 162 240 2 131 162]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 1)
                                (emit/constant 0)
                                (emit/constant 13)
                                (emit/constant 11)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 1)
                                                    (emit/push-value 0)
                                                    (emit/prim-call "logicalAnd")
                                                    (emit/jz 3)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/jmp 2)
                                                    (emit/push-value 11)
                                                    (emit/prim-call "toggle")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test031PrimitiveLogicalOr
  (let [expected [1 3 8 11 13 5 3 232 192 5 9 129 128 190 241 3 132 162 240 2 131 162]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 1)
                                (emit/constant 0)
                                (emit/constant 13)
                                (emit/constant 11)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 1)
                                                    (emit/push-value 0)
                                                    (emit/prim-call "logicalOr")
                                                    (emit/jz 3)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/jmp 2)
                                                    (emit/push-value 11)
                                                    (emit/prim-call "toggle")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test032StopScriptAndRestartShouldResetPCAndStuff
  (let [expected [2 4 8 11 13 9 1 244 3 232 128 6 132 162 134 183 131 162 128 6 224 133 183 208 133 183]
        program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)
                                (emit/constant 1000)
                                (emit/constant 11)
                                (emit/constant 500)}
                    :scripts [(emit/script
                                    :name "blink13"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 11)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "sleepAwake"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/stop "blink13")
                                                    (emit/push-value 500)
                                                    (emit/prim-call "delayMs")
                                                    (emit/start "blink13")
                                                    (emit/push-value 500)
                                                    (emit/prim-call "delayMs")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test033StopCurrentScriptShouldStopImmediatelyAndPCShouldReturnToTheStart
  (let [expected [2 3 8 11 13 5 3 232 128 5 132 162 224 131 162 192 5 1 208]
        program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)
                                (emit/constant 11)
                                (emit/constant 1000)}
                    :scripts [(emit/script
                                    :name "blink13"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/stop "blink13")
                                                    (emit/push-value 11)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "awake"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/start "blink13")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test034StartOnTheCurrentTaskShouldJumpToTheBeginning
  (let [expected [1 1 4 13 128 5 131 180 208 131 181]
        program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/start "main")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test035StartOnAnotherTaskShouldResetToBeginning
  (let [expected [2 3 8 13 100 5 3 232 128 8 131 180 132 183 131 181 133 183 128 1 208]
        program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)
                                (emit/constant 100)
                                (emit/constant 1000)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "delayMs")])
                                (emit/script
                                    :name "awake"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/start "main")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test036ResumeOnARunningTaskShouldHaveNoEffect
  (let [expected [2 2 8 13 100 128 10 216 131 180 132 183 216 131 181 132 183 128 1 216]
        program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)
                                (emit/constant 100)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/resume "main")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/resume "main")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")])
                                (emit/script
                                    :name "awake"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/resume "main")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test037ResumeOnAPausedTaskShouldContinueFromItsCurrentPC
  (let [expected [2 2 4 13 5 3 232 128 6 131 180 232 131 181 232 192 4 1 216]
        program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)
                                (emit/constant 1000)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/pause "main")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/pause "main")])
                                (emit/script
                                    :name "awake"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/resume "main")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test038ResumeOnStoppedTaskShouldJumpToBeginning
  (let [expected [2 1 4 13 128 6 131 180 224 131 181 224 128 1 216]
        program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/stop "main")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/stop "main")])
                                (emit/script
                                    :name "awake"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/resume "main")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test039StartOnStoppedTaskShouldJumpToBeginning
  (let [expected [2 1 4 13 128 6 131 180 224 131 181 224 128 1 208]
        program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/stop "main")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/stop "main")])
                                (emit/script
                                    :name "awake"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/start "main")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test040StartOnPausedTaskShouldJumpToBeginning
  (let [expected [2 1 4 13 128 6 131 180 232 131 181 232 128 1 208]
        program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/pause "main")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/pause "main")])
                                (emit/script
                                    :name "awake"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/start "main")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test041PausingShouldPreserveTheStack
  (let [expected [3 3 8 3 5 5 3 232 144 1 4 5 255 0 132 166 193 162 48 1 1 0 7 255 0 131 166 255 129 232 255 1 187 192 5 1 216]
        program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 5)
                                (emit/constant 3)
                                (emit/constant 1000)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals [(emit/variable "a" 5)]
                                    :instructions [(emit/read-local "a")
                                                    (emit/push-value 5)
                                                    (emit/prim-call "add")
                                                    (emit/script-call "getPin")
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "getPin"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "n" 0)]
                                    :locals [(emit/variable "result" 0)]
                                    :instructions [(emit/read-local "n")
                                                    (emit/push-value 3)
                                                    (emit/prim-call "add")
                                                    (emit/write-local "result")
                                                    (emit/pause "main")
                                                    (emit/read-local "result")
                                                    (emit/prim-call "retv")])
                                (emit/script
                                    :name "awake"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/resume "main")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test042EmptyScriptShouldNotCrashTheVM
  (let [expected [1 0 128 0]
        program (emit/program
                    :globals #{(emit/constant 0)}
                    :scripts [(emit/script
                                    :name "empty"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test043ForLoop
  (let [expected [1 2 8 7 11 144 1 0 13 131 255 128 255 0 132 175 241 7 255 0 180 255 0 129 166 255 128 240 245]
        program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 7)
                                (emit/constant 11)
                                (emit/constant 1)}
                    :scripts [(emit/script
                                    :name "for"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals [(emit/variable "i#1" 0)]
                                    :instructions [(emit/push-value 7)
                                                    (emit/write-local "i#1")
                                                    (emit/read-local "i#1")
                                                    (emit/push-value 11)
                                                    (emit/prim-call "lessThanOrEquals")
                                                    (emit/jz 7)
                                                    (emit/read-local "i#1")
                                                    (emit/prim-call "turnOn")
                                                    (emit/read-local "i#1")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "add")
                                                    (emit/write-local "i#1")
                                                    (emit/jmp -11)])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test044ReversedForLoop
  (let [expected [1 2 8 7 11 144 1 0 13 132 255 128 255 0 131 173 241 7 255 0 180 255 0 130 166 255 128 240 245]
        program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 11)
                                (emit/constant 7)
                                (emit/constant -1)}
                    :scripts [(emit/script
                                    :name "for"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals [(emit/variable "i#1" 0)]
                                    :instructions [(emit/push-value 11)
                                                    (emit/write-local "i#1")
                                                    (emit/read-local "i#1")
                                                    (emit/push-value 7)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz 7)
                                                    (emit/read-local "i#1")
                                                    (emit/prim-call "turnOn")
                                                    (emit/read-local "i#1")
                                                    (emit/push-value -1)
                                                    (emit/prim-call "add")
                                                    (emit/write-local "i#1")
                                                    (emit/jmp -11)])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test045ForLoopWithoutConstantStep
  (let [expected [1 3 12 1 7 11 144 2 0 0 20 132 255 128 255 0 133 131 255 129 255 1 128 245 2 175 240 1 173 241 7 255 0 180 255 0 255 1 166 255 128 240 238]
        program (emit/program
                    :globals #{(emit/variable "step" 1)
                                (emit/constant 0)
                                (emit/constant 7)
                                (emit/constant 11)}
                    :scripts [(emit/script
                                    :name "for"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals [(emit/variable "i#1" 0)
                                             (emit/variable "@1" 0)]
                                    :instructions [(emit/push-value 7)
                                                    (emit/write-local "i#1")
                                                    (emit/read-local "i#1")
                                                    (emit/push-value 11)
                                                    (emit/read-global "step")
                                                    (emit/write-local "@1")
                                                    (emit/read-local "@1")
                                                    (emit/push-value 0)
                                                    (emit/jlte 2)
                                                    (emit/prim-call "lessThanOrEquals")
                                                    (emit/jmp 1)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz 7)
                                                    (emit/read-local "i#1")
                                                    (emit/prim-call "turnOn")
                                                    (emit/read-local "i#1")
                                                    (emit/read-local "@1")
                                                    (emit/prim-call "add")
                                                    (emit/write-local "i#1")
                                                    (emit/jmp -18)])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test046ReverseForLoopWithoutConstantStep
  (let [expected [1 3 8 7 11 7 191 128 0 0 144 2 0 0 20 132 255 128 255 0 131 133 255 129 255 1 128 245 2 175 240 1 173 241 7 255 0 180 255 0 255 1 166 255 128 240 238]
        program (emit/program
                    :globals #{(emit/variable "step" -1)
                                (emit/constant 0)
                                (emit/constant 11)
                                (emit/constant 7)}
                    :scripts [(emit/script
                                    :name "for"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals [(emit/variable "i#1" 0)
                                             (emit/variable "@1" 0)]
                                    :instructions [(emit/push-value 11)
                                                    (emit/write-local "i#1")
                                                    (emit/read-local "i#1")
                                                    (emit/push-value 7)
                                                    (emit/read-global "step")
                                                    (emit/write-local "@1")
                                                    (emit/read-local "@1")
                                                    (emit/push-value 0)
                                                    (emit/jlte 2)
                                                    (emit/prim-call "lessThanOrEquals")
                                                    (emit/jmp 1)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz 7)
                                                    (emit/read-local "i#1")
                                                    (emit/prim-call "turnOn")
                                                    (emit/read-local "i#1")
                                                    (emit/read-local "@1")
                                                    (emit/prim-call "add")
                                                    (emit/write-local "i#1")
                                                    (emit/jmp -18)])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test047ForLoopShouldOnlyEvaluateStepOncePerIteration
  (let [expected [3 3 4 13 11 193 32 0 0 191 128 0 0 0 6 133 130 165 149 133 187 0 6 132 130 165 148 132 187 144 2 0 0 21 128 255 128 255 0 193 192 255 129 255 1 128 245 2 175 240 1 173 241 8 131 255 0 161 255 0 255 1 166 255 128 240 237]
        program (emit/program
                    :globals #{(emit/variable "step" -1)
                                (emit/variable "stop" -10)
                                (emit/constant 0)
                                (emit/constant -1)
                                (emit/constant 13)}
                    :scripts [(emit/script
                                    :name "negatedStep"
                                    :running? false
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-global "step")
                                                    (emit/push-value -1)
                                                    (emit/prim-call "multiply")
                                                    (emit/write-global "step")
                                                    (emit/read-global "step")
                                                    (emit/prim-call "retv")])
                                (emit/script
                                    :name "negatedStop"
                                    :running? false
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-global "stop")
                                                    (emit/push-value -1)
                                                    (emit/prim-call "multiply")
                                                    (emit/write-global "stop")
                                                    (emit/read-global "stop")
                                                    (emit/prim-call "retv")])
                                (emit/script
                                    :name "for"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals [(emit/variable "i#1" 0)
                                             (emit/variable "@1" 0)]
                                    :instructions [(emit/push-value 0)
                                                    (emit/write-local "i#1")
                                                    (emit/read-local "i#1")
                                                    (emit/script-call "negatedStop")
                                                    (emit/script-call "negatedStep")
                                                    (emit/write-local "@1")
                                                    (emit/read-local "@1")
                                                    (emit/push-value 0)
                                                    (emit/jlte 2)
                                                    (emit/prim-call "lessThanOrEquals")
                                                    (emit/jmp 1)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz 8)
                                                    (emit/push-value 13)
                                                    (emit/read-local "i#1")
                                                    (emit/prim-call "write")
                                                    (emit/read-local "i#1")
                                                    (emit/read-local "@1")
                                                    (emit/prim-call "add")
                                                    (emit/write-local "i#1")
                                                    (emit/jmp -19)])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test048MutexShouldGuaranteeACriticalSection
  (let [expected [5 8 12 0 11 13 9 3 232 7 208 15 191 128 0 0 191 0 0 0 62 128 0 0 0 12 131 128 170 136 188 170 190 241 248 129 147 188 152 0 4 128 147 130 152 192 6 2 133 162 144 1 0 20 192 186 128 255 128 255 0 129 175 241 10 132 255 0 161 134 183 255 0 138 166 255 128 240 242 193 186 144 1 0 20 192 186 129 255 128 255 0 128 173 241 10 132 255 0 161 135 183 255 0 137 166 255 128 240 242 193 186]
        program (emit/program
                    :globals #{(emit/variable "m.lock" 0)
                                (emit/variable "m.owner" -1)
                                (emit/constant 0)
                                (emit/constant 1)
                                (emit/constant -1)
                                (emit/constant 1000)
                                (emit/constant 13)
                                (emit/constant 11)
                                (emit/constant 0.25)
                                (emit/constant 2000)
                                (emit/constant -0.5)}
                    :scripts [(emit/script
                                    :name "m.acquire"
                                    :running? false
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-global "m.lock")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "equals")
                                                    (emit/read-global "m.owner")
                                                    (emit/prim-call "coroutine")
                                                    (emit/prim-call "equals")
                                                    (emit/prim-call "logicalOr")
                                                    (emit/jz -8)
                                                    (emit/push-value 1)
                                                    (emit/write-global "m.lock")
                                                    (emit/prim-call "coroutine")
                                                    (emit/write-global "m.owner")])
                                (emit/script
                                    :name "m.release"
                                    :running? false
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 0)
                                                    (emit/write-global "m.lock")
                                                    (emit/push-value -1)
                                                    (emit/write-global "m.owner")])
                                (emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "test1"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals [(emit/variable "a#1" 0)]
                                    :instructions [(emit/script-call "m.acquire")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 0)
                                                    (emit/write-local "a#1")
                                                    (emit/read-local "a#1")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "lessThanOrEquals")
                                                    (emit/jz 10)
                                                    (emit/push-value 11)
                                                    (emit/read-local "a#1")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "delayMs")
                                                    (emit/read-local "a#1")
                                                    (emit/push-value 0.25)
                                                    (emit/prim-call "add")
                                                    (emit/write-local "a#1")
                                                    (emit/jmp -14)
                                                    (emit/script-call "m.release")
                                                    (emit/prim-call "pop")])
                                (emit/script
                                    :name "test2"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals [(emit/variable "a#2" 0)]
                                    :instructions [(emit/script-call "m.acquire")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 1)
                                                    (emit/write-local "a#2")
                                                    (emit/read-local "a#2")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz 10)
                                                    (emit/push-value 11)
                                                    (emit/read-local "a#2")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 2000)
                                                    (emit/prim-call "delayMs")
                                                    (emit/read-local "a#2")
                                                    (emit/push-value -0.5)
                                                    (emit/prim-call "add")
                                                    (emit/write-local "a#2")
                                                    (emit/jmp -14)
                                                    (emit/script-call "m.release")
                                                    (emit/prim-call "pop")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test049ChannelShouldDeadlockIfConsumingFromTheSameTaskAsProducer
  (let [expected [4 7 16 0 0 11 13 5 3 232 11 191 128 0 0 191 128 0 0 32 1 27 188 137 171 241 8 137 130 170 241 3 188 153 182 240 244 131 128 171 242 252 130 153 182 255 0 148 129 147 131 128 171 242 252 0 23 188 136 171 241 8 136 130 170 241 3 188 152 182 240 244 131 129 171 242 252 130 152 182 128 147 132 187 192 7 2 134 162 128 7 133 180 193 192 186 133 162]
        program (emit/program
                    :globals #{(emit/variable "c.value" 0)
                                (emit/variable "c.state" 0)
                                (emit/variable "c.r_turn" -1)
                                (emit/variable "c.s_turn" -1)
                                (emit/constant 0)
                                (emit/constant -1)
                                (emit/constant 1)
                                (emit/constant 1000)
                                (emit/constant 13)
                                (emit/constant 11)}
                    :scripts [(emit/script
                                    :name "c.send"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "val#1" 0)]
                                    :locals []
                                    :instructions [(emit/prim-call "coroutine")
                                                    (emit/read-global "c.s_turn")
                                                    (emit/prim-call "notEquals")
                                                    (emit/jz 8)
                                                    (emit/read-global "c.s_turn")
                                                    (emit/push-value -1)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 3)
                                                    (emit/prim-call "coroutine")
                                                    (emit/write-global "c.s_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/jmp -12)
                                                    (emit/read-global "c.state")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "notEquals")
                                                    (emit/jnz -4)
                                                    (emit/push-value -1)
                                                    (emit/write-global "c.s_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/read-local "val#1")
                                                    (emit/write-global "c.value")
                                                    (emit/push-value 1)
                                                    (emit/write-global "c.state")
                                                    (emit/read-global "c.state")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "notEquals")
                                                    (emit/jnz -4)])
                                (emit/script
                                    :name "c.receive"
                                    :running? false
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/prim-call "coroutine")
                                                    (emit/read-global "c.r_turn")
                                                    (emit/prim-call "notEquals")
                                                    (emit/jz 8)
                                                    (emit/read-global "c.r_turn")
                                                    (emit/push-value -1)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 3)
                                                    (emit/prim-call "coroutine")
                                                    (emit/write-global "c.r_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/jmp -12)
                                                    (emit/read-global "c.state")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "notEquals")
                                                    (emit/jnz -4)
                                                    (emit/push-value -1)
                                                    (emit/write-global "c.r_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/push-value 0)
                                                    (emit/write-global "c.state")
                                                    (emit/read-global "c.value")
                                                    (emit/prim-call "retv")])
                                (emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "cp"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 11)
                                                    (emit/prim-call "turnOn")
                                                    (emit/script-call "c.receive")
                                                    (emit/script-call "c.send")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 11)
                                                    (emit/prim-call "toggle")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test050ChannelWithMultipleProducersAndNoConsumerShouldBlockAllProducers
  (let [expected [6 10 24 0 0 2 3 11 13 5 3 232 15 191 128 0 0 63 0 0 0 63 0 0 0 32 1 27 188 138 171 241 8 138 130 170 241 3 188 154 182 240 244 131 128 171 242 252 130 154 182 255 0 148 129 147 131 128 171 242 252 128 5 129 192 186 129 156 128 5 128 192 186 133 156 128 5 139 192 186 134 156 192 9 2 136 162 128 3 135 140 161]
        program (emit/program
                    :globals #{(emit/variable "c.value" 0)
                                (emit/variable "c.state" 0)
                                (emit/variable "c.s_turn" -1)
                                (emit/variable "counter" 0.5)
                                (emit/constant 0)
                                (emit/constant -1)
                                (emit/constant 1)
                                (emit/constant 2)
                                (emit/constant 0.5)
                                (emit/constant 3)
                                (emit/constant 1000)
                                (emit/constant 13)
                                (emit/constant 11)}
                    :scripts [(emit/script
                                    :name "c.send"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "val#1" 0)]
                                    :locals []
                                    :instructions [(emit/prim-call "coroutine")
                                                    (emit/read-global "c.s_turn")
                                                    (emit/prim-call "notEquals")
                                                    (emit/jz 8)
                                                    (emit/read-global "c.s_turn")
                                                    (emit/push-value -1)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 3)
                                                    (emit/prim-call "coroutine")
                                                    (emit/write-global "c.s_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/jmp -12)
                                                    (emit/read-global "c.state")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "notEquals")
                                                    (emit/jnz -4)
                                                    (emit/push-value -1)
                                                    (emit/write-global "c.s_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/read-local "val#1")
                                                    (emit/write-global "c.value")
                                                    (emit/push-value 1)
                                                    (emit/write-global "c.state")
                                                    (emit/read-global "c.state")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "notEquals")
                                                    (emit/jnz -4)])
                                (emit/script
                                    :name "producer1"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 1)
                                                    (emit/script-call "c.send")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 1)
                                                    (emit/write-global "counter")])
                                (emit/script
                                    :name "producer0"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 0)
                                                    (emit/script-call "c.send")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 2)
                                                    (emit/write-global "counter")])
                                (emit/script
                                    :name "producer05"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 0.5)
                                                    (emit/script-call "c.send")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 3)
                                                    (emit/write-global "counter")])
                                (emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "test"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 11)
                                                    (emit/read-global "counter")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test051ChannelWithOneProducerAndOneConsumerBlocksTheProducerAtTheRateOfConsumer
  (let [expected [4 7 16 0 0 11 13 5 3 232 11 191 128 0 0 191 128 0 0 32 1 27 188 137 171 241 8 137 130 170 241 3 188 153 182 240 244 131 128 171 242 252 130 153 182 255 0 148 129 147 131 128 171 242 252 0 23 188 136 171 241 8 136 130 170 241 3 188 152 182 240 244 131 129 171 242 252 130 152 182 128 147 132 187 144 1 1 11 255 0 192 186 129 255 0 168 255 128 133 255 0 161 240 245 192 7 3 134 193 161]
        program (emit/program
                    :globals #{(emit/variable "c.value" 0)
                                (emit/variable "c.state" 0)
                                (emit/variable "c.r_turn" -1)
                                (emit/variable "c.s_turn" -1)
                                (emit/constant 0)
                                (emit/constant -1)
                                (emit/constant 1)
                                (emit/constant 11)
                                (emit/constant 1000)
                                (emit/constant 13)}
                    :scripts [(emit/script
                                    :name "c.send"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "val#1" 0)]
                                    :locals []
                                    :instructions [(emit/prim-call "coroutine")
                                                    (emit/read-global "c.s_turn")
                                                    (emit/prim-call "notEquals")
                                                    (emit/jz 8)
                                                    (emit/read-global "c.s_turn")
                                                    (emit/push-value -1)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 3)
                                                    (emit/prim-call "coroutine")
                                                    (emit/write-global "c.s_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/jmp -12)
                                                    (emit/read-global "c.state")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "notEquals")
                                                    (emit/jnz -4)
                                                    (emit/push-value -1)
                                                    (emit/write-global "c.s_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/read-local "val#1")
                                                    (emit/write-global "c.value")
                                                    (emit/push-value 1)
                                                    (emit/write-global "c.state")
                                                    (emit/read-global "c.state")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "notEquals")
                                                    (emit/jnz -4)])
                                (emit/script
                                    :name "c.receive"
                                    :running? false
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/prim-call "coroutine")
                                                    (emit/read-global "c.r_turn")
                                                    (emit/prim-call "notEquals")
                                                    (emit/jz 8)
                                                    (emit/read-global "c.r_turn")
                                                    (emit/push-value -1)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 3)
                                                    (emit/prim-call "coroutine")
                                                    (emit/write-global "c.r_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/jmp -12)
                                                    (emit/read-global "c.state")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "notEquals")
                                                    (emit/jnz -4)
                                                    (emit/push-value -1)
                                                    (emit/write-global "c.r_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/push-value 0)
                                                    (emit/write-global "c.state")
                                                    (emit/read-global "c.value")
                                                    (emit/prim-call "retv")])
                                (emit/script
                                    :name "producer"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals [(emit/variable "a#2" 1)]
                                    :instructions [(emit/read-local "a#2")
                                                    (emit/script-call "c.send")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 1)
                                                    (emit/read-local "a#2")
                                                    (emit/prim-call "subtract")
                                                    (emit/write-local "a#2")
                                                    (emit/push-value 11)
                                                    (emit/read-local "a#2")
                                                    (emit/prim-call "write")
                                                    (emit/jmp -11)])
                                (emit/script
                                    :name "consumer"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/script-call "c.receive")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test052ChannelWithMultipleProducersAndOneConsumer
  (let [expected [9 10 16 0 0 11 13 5 3 232 23 191 128 0 0 191 128 0 0 62 128 0 0 63 0 0 0 63 64 0 0 32 1 27 188 137 171 241 8 137 130 170 241 3 188 153 182 240 244 131 128 171 242 252 130 153 182 255 0 148 129 147 131 128 171 242 252 0 23 188 136 171 241 8 136 130 170 241 3 188 152 182 240 244 131 129 171 242 252 130 152 182 128 147 132 187 192 7 2 134 162 128 3 128 192 186 128 3 138 192 186 128 3 139 192 186 128 3 140 192 186 128 3 129 192 186 192 7 3 133 193 161]
        program (emit/program
                    :globals #{(emit/variable "c.value" 0)
                                (emit/variable "c.state" 0)
                                (emit/variable "c.r_turn" -1)
                                (emit/variable "c.s_turn" -1)
                                (emit/constant 0)
                                (emit/constant -1)
                                (emit/constant 1)
                                (emit/constant 1000)
                                (emit/constant 13)
                                (emit/constant 0.25)
                                (emit/constant 0.5)
                                (emit/constant 0.75)
                                (emit/constant 11)}
                    :scripts [(emit/script
                                    :name "c.send"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "val#1" 0)]
                                    :locals []
                                    :instructions [(emit/prim-call "coroutine")
                                                    (emit/read-global "c.s_turn")
                                                    (emit/prim-call "notEquals")
                                                    (emit/jz 8)
                                                    (emit/read-global "c.s_turn")
                                                    (emit/push-value -1)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 3)
                                                    (emit/prim-call "coroutine")
                                                    (emit/write-global "c.s_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/jmp -12)
                                                    (emit/read-global "c.state")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "notEquals")
                                                    (emit/jnz -4)
                                                    (emit/push-value -1)
                                                    (emit/write-global "c.s_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/read-local "val#1")
                                                    (emit/write-global "c.value")
                                                    (emit/push-value 1)
                                                    (emit/write-global "c.state")
                                                    (emit/read-global "c.state")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "notEquals")
                                                    (emit/jnz -4)])
                                (emit/script
                                    :name "c.receive"
                                    :running? false
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/prim-call "coroutine")
                                                    (emit/read-global "c.r_turn")
                                                    (emit/prim-call "notEquals")
                                                    (emit/jz 8)
                                                    (emit/read-global "c.r_turn")
                                                    (emit/push-value -1)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 3)
                                                    (emit/prim-call "coroutine")
                                                    (emit/write-global "c.r_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/jmp -12)
                                                    (emit/read-global "c.state")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "notEquals")
                                                    (emit/jnz -4)
                                                    (emit/push-value -1)
                                                    (emit/write-global "c.r_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/push-value 0)
                                                    (emit/write-global "c.state")
                                                    (emit/read-global "c.value")
                                                    (emit/prim-call "retv")])
                                (emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "producer1"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 0)
                                                    (emit/script-call "c.send")
                                                    (emit/prim-call "pop")])
                                (emit/script
                                    :name "producer2"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 0.25)
                                                    (emit/script-call "c.send")
                                                    (emit/prim-call "pop")])
                                (emit/script
                                    :name "producer3"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 0.5)
                                                    (emit/script-call "c.send")
                                                    (emit/prim-call "pop")])
                                (emit/script
                                    :name "producer4"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 0.75)
                                                    (emit/script-call "c.send")
                                                    (emit/prim-call "pop")])
                                (emit/script
                                    :name "producer5"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 1)
                                                    (emit/script-call "c.send")
                                                    (emit/prim-call "pop")])
                                (emit/script
                                    :name "consumer"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 11)
                                                    (emit/script-call "c.receive")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test053ChannelWithMultipleConsumersAndOneProducer
  (let [expected [7 10 24 0 0 10 11 12 13 5 3 232 15 191 128 0 0 191 128 0 0 62 128 0 0 32 1 27 188 139 171 241 8 139 130 170 241 3 188 155 182 240 244 131 128 171 242 252 130 155 182 255 0 148 129 147 131 128 171 242 252 0 23 188 138 171 241 8 138 130 170 241 3 188 154 182 240 244 131 129 171 242 252 130 154 182 128 147 132 187 128 3 136 193 161 128 3 133 193 161 128 3 134 193 161 128 3 135 193 161 144 1 0 16 128 255 128 255 0 129 175 241 10 255 0 192 186 137 183 255 0 140 166 255 128 240 242]
        program (emit/program
                    :globals #{(emit/variable "c.value" 0)
                                (emit/variable "c.state" 0)
                                (emit/variable "c.r_turn" -1)
                                (emit/variable "c.s_turn" -1)
                                (emit/constant 0)
                                (emit/constant -1)
                                (emit/constant 1)
                                (emit/constant 13)
                                (emit/constant 10)
                                (emit/constant 11)
                                (emit/constant 12)
                                (emit/constant 1000)
                                (emit/constant 0.25)}
                    :scripts [(emit/script
                                    :name "c.send"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "val#1" 0)]
                                    :locals []
                                    :instructions [(emit/prim-call "coroutine")
                                                    (emit/read-global "c.s_turn")
                                                    (emit/prim-call "notEquals")
                                                    (emit/jz 8)
                                                    (emit/read-global "c.s_turn")
                                                    (emit/push-value -1)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 3)
                                                    (emit/prim-call "coroutine")
                                                    (emit/write-global "c.s_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/jmp -12)
                                                    (emit/read-global "c.state")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "notEquals")
                                                    (emit/jnz -4)
                                                    (emit/push-value -1)
                                                    (emit/write-global "c.s_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/read-local "val#1")
                                                    (emit/write-global "c.value")
                                                    (emit/push-value 1)
                                                    (emit/write-global "c.state")
                                                    (emit/read-global "c.state")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "notEquals")
                                                    (emit/jnz -4)])
                                (emit/script
                                    :name "c.receive"
                                    :running? false
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/prim-call "coroutine")
                                                    (emit/read-global "c.r_turn")
                                                    (emit/prim-call "notEquals")
                                                    (emit/jz 8)
                                                    (emit/read-global "c.r_turn")
                                                    (emit/push-value -1)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 3)
                                                    (emit/prim-call "coroutine")
                                                    (emit/write-global "c.r_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/jmp -12)
                                                    (emit/read-global "c.state")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "notEquals")
                                                    (emit/jnz -4)
                                                    (emit/push-value -1)
                                                    (emit/write-global "c.r_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/push-value 0)
                                                    (emit/write-global "c.state")
                                                    (emit/read-global "c.value")
                                                    (emit/prim-call "retv")])
                                (emit/script
                                    :name "consumer1"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/script-call "c.receive")
                                                    (emit/prim-call "write")])
                                (emit/script
                                    :name "consumer2"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 10)
                                                    (emit/script-call "c.receive")
                                                    (emit/prim-call "write")])
                                (emit/script
                                    :name "consumer3"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 11)
                                                    (emit/script-call "c.receive")
                                                    (emit/prim-call "write")])
                                (emit/script
                                    :name "consumer4"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 12)
                                                    (emit/script-call "c.receive")
                                                    (emit/prim-call "write")])
                                (emit/script
                                    :name "consumer"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals [(emit/variable "a#2" 0)]
                                    :instructions [(emit/push-value 0)
                                                    (emit/write-local "a#2")
                                                    (emit/read-local "a#2")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "lessThanOrEquals")
                                                    (emit/jz 10)
                                                    (emit/read-local "a#2")
                                                    (emit/script-call "c.send")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "delayMs")
                                                    (emit/read-local "a#2")
                                                    (emit/push-value 0.25)
                                                    (emit/prim-call "add")
                                                    (emit/write-local "a#2")
                                                    (emit/jmp -14)])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test054VariablesWithTheSameNameInDifferentScopesShouldNotInterfereWithEachOther
  (let [expected [1 3 8 6 7 5 3 232 208 5 2 4 0 10 129 241 2 255 0 162 255 1 131 166 255 129 255 1 162]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 1)
                                (emit/constant 7)
                                (emit/constant 0)
                                (emit/constant 6)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals [(emit/variable "pin#1" 7)
                                             (emit/variable "pin#2" 0)]
                                    :instructions [(emit/push-value 1)
                                                    (emit/jz 2)
                                                    (emit/read-local "pin#1")
                                                    (emit/prim-call "toggle")
                                                    (emit/read-local "pin#2")
                                                    (emit/push-value 6)
                                                    (emit/prim-call "add")
                                                    (emit/write-local "pin#2")
                                                    (emit/read-local "pin#2")
                                                    (emit/prim-call "toggle")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test055VariablesWithTheSameNameInDifferentScopesShouldNotInterfereWithEachOther
  (let [expected [1 3 8 6 7 5 3 232 208 5 2 4 3 6 129 241 2 255 0 162 255 1 162]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 1)
                                (emit/constant 7)
                                (emit/constant 6)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals [(emit/variable "pin#1" 7)
                                             (emit/variable "pin#2" 6)]
                                    :instructions [(emit/push-value 1)
                                                    (emit/jz 2)
                                                    (emit/read-local "pin#1")
                                                    (emit/prim-call "toggle")
                                                    (emit/read-local "pin#2")
                                                    (emit/prim-call "toggle")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test056Round
  (let [expected [1 7 12 10 11 12 5 3 232 15 62 128 0 0 63 0 0 0 63 64 0 0 192 6 12 131 135 250 2 161 132 136 250 2 161 133 137 250 2 161]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 10)
                                (emit/constant 0.25)
                                (emit/constant 11)
                                (emit/constant 0.5)
                                (emit/constant 12)
                                (emit/constant 0.75)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 10)
                                                    (emit/push-value 0.25)
                                                    (emit/prim-call "round")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 11)
                                                    (emit/push-value 0.5)
                                                    (emit/prim-call "round")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 12)
                                                    (emit/push-value 0.75)
                                                    (emit/prim-call "round")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test057Ceil
  (let [expected [1 7 12 10 11 12 5 3 232 15 62 128 0 0 63 0 0 0 63 64 0 0 192 6 12 131 135 250 3 161 132 136 250 3 161 133 137 250 3 161]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 10)
                                (emit/constant 0.25)
                                (emit/constant 11)
                                (emit/constant 0.5)
                                (emit/constant 12)
                                (emit/constant 0.75)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 10)
                                                    (emit/push-value 0.25)
                                                    (emit/prim-call "ceil")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 11)
                                                    (emit/push-value 0.5)
                                                    (emit/prim-call "ceil")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 12)
                                                    (emit/push-value 0.75)
                                                    (emit/prim-call "ceil")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test058Floor
  (let [expected [1 7 12 10 11 12 5 3 232 15 62 128 0 0 63 0 0 0 63 64 0 0 192 6 12 131 135 250 4 161 132 136 250 4 161 133 137 250 4 161]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 10)
                                (emit/constant 0.25)
                                (emit/constant 11)
                                (emit/constant 0.5)
                                (emit/constant 12)
                                (emit/constant 0.75)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 10)
                                                    (emit/push-value 0.25)
                                                    (emit/prim-call "floor")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 11)
                                                    (emit/push-value 0.5)
                                                    (emit/prim-call "floor")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 12)
                                                    (emit/push-value 0.75)
                                                    (emit/prim-call "floor")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test059Sqrt
  (let [expected [1 3 4 9 5 3 232 7 62 128 0 0 192 4 4 131 133 250 5 161]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 9)
                                (emit/constant 0.25)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 9)
                                                    (emit/push-value 0.25)
                                                    (emit/prim-call "sqrt")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test060Abs
  (let [expected [1 6 12 9 10 13 5 3 232 11 191 0 0 0 63 0 0 0 192 6 12 133 130 250 6 161 131 135 250 6 161 132 136 250 6 161]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 13)
                                (emit/constant -1)
                                (emit/constant 9)
                                (emit/constant -0.5)
                                (emit/constant 10)
                                (emit/constant 0.5)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/push-value -1)
                                                    (emit/prim-call "abs")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value -0.5)
                                                    (emit/prim-call "abs")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 10)
                                                    (emit/push-value 0.5)
                                                    (emit/prim-call "abs")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test061NaturalLogarithm
  (let [expected [1 7 20 2 3 7 8 9 5 3 232 7 62 69 200 96 192 8 14 133 129 250 7 161 134 131 250 7 137 168 161 135 132 250 7 161]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant 1)
                                (emit/constant 8)
                                (emit/constant 2)
                                (emit/constant 0.1931471805599453)
                                (emit/constant 9)
                                (emit/constant 3)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value 1)
                                                    (emit/prim-call "ln")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 8)
                                                    (emit/push-value 2)
                                                    (emit/prim-call "ln")
                                                    (emit/push-value 0.1931471805599453)
                                                    (emit/prim-call "subtract")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value 3)
                                                    (emit/prim-call "ln")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test062Log10
  (let [expected [1 7 20 3 7 8 9 10 5 3 232 7 60 187 108 53 192 8 14 132 129 250 8 161 133 131 250 8 137 166 161 134 135 250 8 161]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant 1)
                                (emit/constant 8)
                                (emit/constant 3)
                                (emit/constant 0.02287874528033756)
                                (emit/constant 9)
                                (emit/constant 10)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value 1)
                                                    (emit/prim-call "log10")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 8)
                                                    (emit/push-value 3)
                                                    (emit/prim-call "log10")
                                                    (emit/push-value 0.02287874528033756)
                                                    (emit/prim-call "add")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value 10)
                                                    (emit/prim-call "log10")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test063Exp
  (let [expected [1 6 12 7 8 9 5 3 232 11 193 93 12 85 191 49 114 24 192 6 12 131 135 250 9 161 132 136 250 9 161 133 128 250 9 161]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant -13.81551055796427)
                                (emit/constant 8)
                                (emit/constant -0.693147180559945)
                                (emit/constant 9)
                                (emit/constant 0)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value -13.81551055796427)
                                                    (emit/prim-call "exp")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 8)
                                                    (emit/push-value -0.693147180559945)
                                                    (emit/prim-call "exp")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value 0)
                                                    (emit/prim-call "exp")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test064Pow10
  (let [expected [1 6 12 7 8 9 5 3 232 11 192 64 0 0 190 154 28 172 192 6 12 131 135 250 10 161 132 136 250 10 161 133 128 250 10 161]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant -3)
                                (emit/constant 8)
                                (emit/constant -0.301)
                                (emit/constant 9)
                                (emit/constant 0)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value -3)
                                                    (emit/prim-call "pow10")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 8)
                                                    (emit/push-value -0.301)
                                                    (emit/prim-call "pow10")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value 0)
                                                    (emit/prim-call "pow10")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test065IsCloseTo
  (let [expected [1 9 20 2 10 11 12 13 5 3 232 15 63 128 0 84 64 0 16 98 127 128 0 0 192 8 24 129 137 250 28 241 3 135 180 240 2 135 181 134 128 128 250 28 161 133 131 138 250 28 161 132 139 139 250 28 161]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 1)
                                (emit/constant 1.00001)
                                (emit/constant 13)
                                (emit/constant 12)
                                (emit/constant 0)
                                (emit/constant 11)
                                (emit/constant 2)
                                (emit/constant 2.001)
                                (emit/constant 10)
                                (emit/constant ##Inf)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 1)
                                                    (emit/push-value 1.00001)
                                                    (emit/prim-call "isCloseTo")
                                                    (emit/jz 3)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/jmp 2)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/push-value 12)
                                                    (emit/push-value 0)
                                                    (emit/push-value 0)
                                                    (emit/prim-call "isCloseTo")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 11)
                                                    (emit/push-value 2)
                                                    (emit/push-value 2.001)
                                                    (emit/prim-call "isCloseTo")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 10)
                                                    (emit/push-value ##Inf)
                                                    (emit/push-value ##Inf)
                                                    (emit/prim-call "isCloseTo")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test066Asin
  (let [expected [1 6 12 7 8 9 5 3 232 11 191 201 15 219 62 245 194 143 192 6 14 131 128 250 11 161 132 136 250 11 161 133 130 250 11 135 250 28 161]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant 0)
                                (emit/constant 8)
                                (emit/constant 0.48)
                                (emit/constant 9)
                                (emit/constant -1)
                                (emit/constant -1.570796326794897)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value 0)
                                                    (emit/prim-call "asin")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 8)
                                                    (emit/push-value 0.48)
                                                    (emit/prim-call "asin")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value -1)
                                                    (emit/prim-call "asin")
                                                    (emit/push-value -1.570796326794897)
                                                    (emit/prim-call "isCloseTo")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test067Acos
  (let [expected [1 6 12 7 8 9 5 3 232 11 63 96 182 11 63 201 15 219 192 6 14 131 129 250 12 161 132 135 250 12 161 133 128 250 12 136 250 28 161]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant 1)
                                (emit/constant 8)
                                (emit/constant 0.8777777777)
                                (emit/constant 9)
                                (emit/constant 0)
                                (emit/constant 1.570796326794897)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value 1)
                                                    (emit/prim-call "acos")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 8)
                                                    (emit/push-value 0.8777777777)
                                                    (emit/prim-call "acos")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value 0)
                                                    (emit/prim-call "acos")
                                                    (emit/push-value 1.570796326794897)
                                                    (emit/prim-call "isCloseTo")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test068Atan
  (let [expected [1 6 12 7 8 9 5 3 232 11 63 11 224 223 63 202 61 113 192 6 12 131 128 250 13 161 132 135 250 13 161 133 136 250 13 161]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant 0)
                                (emit/constant 8)
                                (emit/constant 0.5464)
                                (emit/constant 9)
                                (emit/constant 1.58)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value 0)
                                                    (emit/prim-call "atan")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 8)
                                                    (emit/push-value 0.5464)
                                                    (emit/prim-call "atan")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value 1.58)
                                                    (emit/prim-call "atan")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test069Power
  (let [expected [1 6 16 2 7 8 9 5 3 232 7 63 53 4 243 192 7 15 132 128 129 250 14 161 133 136 131 250 14 161 134 129 128 250 14 161]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant 0)
                                (emit/constant 1)
                                (emit/constant 8)
                                (emit/constant 0.7071067811865475)
                                (emit/constant 2)
                                (emit/constant 9)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value 0)
                                                    (emit/push-value 1)
                                                    (emit/prim-call "power")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 8)
                                                    (emit/push-value 0.7071067811865475)
                                                    (emit/push-value 2)
                                                    (emit/prim-call "power")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value 1)
                                                    (emit/push-value 0)
                                                    (emit/prim-call "power")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test070IsOn
  (let [expected [1 2 4 13 5 3 232 192 4 8 131 250 15 241 3 131 181 240 2 131 180]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 13)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "isOn")
                                                    (emit/jz 3)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/jmp 2)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOn")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test071IsOff
  (let [expected [1 2 4 13 5 3 232 192 4 8 131 250 16 241 3 131 180 240 2 131 181]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 13)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "isOff")
                                                    (emit/jz 3)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/jmp 2)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test072Mod
  (let [expected [1 8 28 0 2 3 10 11 12 13 5 3 232 192 10 32 131 133 250 17 147 131 128 170 241 2 137 162 131 129 170 241 2 136 162 131 132 170 241 2 135 162 131 133 170 241 2 134 162 131 129 166 147]
        program (emit/program
                    :globals #{(emit/variable "a" 0)
                                (emit/constant 1000)
                                (emit/constant 3)
                                (emit/constant 0)
                                (emit/constant 13)
                                (emit/constant 1)
                                (emit/constant 12)
                                (emit/constant 2)
                                (emit/constant 11)
                                (emit/constant 10)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-global "a")
                                                    (emit/push-value 3)
                                                    (emit/prim-call "remainder")
                                                    (emit/write-global "a")
                                                    (emit/read-global "a")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 2)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/read-global "a")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 2)
                                                    (emit/push-value 12)
                                                    (emit/prim-call "toggle")
                                                    (emit/read-global "a")
                                                    (emit/push-value 2)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 2)
                                                    (emit/push-value 11)
                                                    (emit/prim-call "toggle")
                                                    (emit/read-global "a")
                                                    (emit/push-value 3)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 2)
                                                    (emit/push-value 10)
                                                    (emit/prim-call "toggle")
                                                    (emit/read-global "a")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "add")
                                                    (emit/write-global "a")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test073Constrain
  (let [expected [1 9 20 5 7 8 9 10 5 3 232 15 193 32 0 0 192 64 0 0 63 0 0 0 192 8 22 132 137 138 131 250 18 138 170 161 133 139 138 131 250 18 161 134 135 138 131 250 18 131 170 161]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant -10)
                                (emit/constant -3)
                                (emit/constant 5)
                                (emit/constant 8)
                                (emit/constant 0.5)
                                (emit/constant 9)
                                (emit/constant 10)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value -10)
                                                    (emit/push-value -3)
                                                    (emit/push-value 5)
                                                    (emit/prim-call "constrain")
                                                    (emit/push-value -3)
                                                    (emit/prim-call "equals")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 8)
                                                    (emit/push-value 0.5)
                                                    (emit/push-value -3)
                                                    (emit/push-value 5)
                                                    (emit/prim-call "constrain")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value 10)
                                                    (emit/push-value -3)
                                                    (emit/push-value 5)
                                                    (emit/prim-call "constrain")
                                                    (emit/push-value 5)
                                                    (emit/prim-call "equals")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test074RandomInt
  (let [expected [1 5 8 0 13 5 3 232 6 1 134 160 7 199 195 80 0 208 5 1 0 23 135 134 250 19 255 128 255 0 131 171 255 0 135 173 189 255 0 134 175 189 241 3 132 180 240 2 132 181 255 0 147]
        program (emit/program
                    :globals #{(emit/variable "old" 0)
                                (emit/constant 1000)
                                (emit/constant 0)
                                (emit/constant -100000)
                                (emit/constant 100000)
                                (emit/constant 13)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals [(emit/variable "a#1" 0)]
                                    :instructions [(emit/push-value -100000)
                                                    (emit/push-value 100000)
                                                    (emit/prim-call "randomInt")
                                                    (emit/write-local "a#1")
                                                    (emit/read-local "a#1")
                                                    (emit/read-global "old")
                                                    (emit/prim-call "notEquals")
                                                    (emit/read-local "a#1")
                                                    (emit/push-value -100000)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/prim-call "logicalAnd")
                                                    (emit/read-local "a#1")
                                                    (emit/push-value 100000)
                                                    (emit/prim-call "lessThanOrEquals")
                                                    (emit/prim-call "logicalAnd")
                                                    (emit/jz 3)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/jmp 2)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/read-local "a#1")
                                                    (emit/write-global "old")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test075Random
  (let [expected [1 3 8 0 13 5 3 232 208 5 1 0 21 250 20 255 128 255 0 131 171 255 0 128 173 189 255 0 129 175 189 241 3 132 180 240 2 132 181 255 0 147]
        program (emit/program
                    :globals #{(emit/variable "old" 0)
                                (emit/constant 1000)
                                (emit/constant 0)
                                (emit/constant 1)
                                (emit/constant 13)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals [(emit/variable "a#1" 0)]
                                    :instructions [(emit/prim-call "random")
                                                    (emit/write-local "a#1")
                                                    (emit/read-local "a#1")
                                                    (emit/read-global "old")
                                                    (emit/prim-call "notEquals")
                                                    (emit/read-local "a#1")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/prim-call "logicalAnd")
                                                    (emit/read-local "a#1")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "lessThanOrEquals")
                                                    (emit/prim-call "logicalAnd")
                                                    (emit/jz 3)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/jmp 2)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/read-local "a#1")
                                                    (emit/write-global "old")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test076IsEven
  (let [expected [1 7 16 2 7 8 9 5 3 232 11 192 0 0 0 63 0 0 0 192 7 17 132 129 250 21 161 131 250 21 136 250 21 189 241 3 133 137 161 134 128 250 21 161]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant 1)
                                (emit/constant 2)
                                (emit/constant -2)
                                (emit/constant 8)
                                (emit/constant 0.5)
                                (emit/constant 9)
                                (emit/constant 0)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value 1)
                                                    (emit/prim-call "isEven")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 2)
                                                    (emit/prim-call "isEven")
                                                    (emit/push-value -2)
                                                    (emit/prim-call "isEven")
                                                    (emit/prim-call "logicalAnd")
                                                    (emit/jz 3)
                                                    (emit/push-value 8)
                                                    (emit/push-value 0.5)
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value 0)
                                                    (emit/prim-call "isEven")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test077IsOdd
  (let [expected [1 6 16 3 7 8 9 5 3 232 7 63 0 0 0 192 7 17 132 128 250 22 161 129 250 22 130 250 22 189 241 3 133 136 161 134 131 250 22 161]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant 0)
                                (emit/constant 1)
                                (emit/constant -1)
                                (emit/constant 8)
                                (emit/constant 0.5)
                                (emit/constant 9)
                                (emit/constant 3)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value 0)
                                                    (emit/prim-call "isOdd")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "isOdd")
                                                    (emit/push-value -1)
                                                    (emit/prim-call "isOdd")
                                                    (emit/prim-call "logicalAnd")
                                                    (emit/jz 3)
                                                    (emit/push-value 8)
                                                    (emit/push-value 0.5)
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value 3)
                                                    (emit/prim-call "isOdd")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test078IsPrime
  (let [expected [1 8 24 2 3 5 7 8 9 5 3 232 7 63 0 0 0 192 9 17 134 136 250 23 161 131 250 23 132 250 23 189 241 3 135 138 161 136 133 250 23 161]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant 9)
                                (emit/constant 2)
                                (emit/constant 3)
                                (emit/constant 8)
                                (emit/constant 0.5)
                                (emit/constant 5)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value 9)
                                                    (emit/prim-call "isPrime")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 2)
                                                    (emit/prim-call "isPrime")
                                                    (emit/push-value 3)
                                                    (emit/prim-call "isPrime")
                                                    (emit/prim-call "logicalAnd")
                                                    (emit/jz 3)
                                                    (emit/push-value 8)
                                                    (emit/push-value 0.5)
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value 5)
                                                    (emit/prim-call "isPrime")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test079IsWhole
  (let [expected [1 8 12 7 8 9 5 3 232 6 1 134 160 15 193 32 0 0 63 0 0 0 65 24 0 0 192 6 17 131 138 250 24 161 128 250 24 135 250 24 189 241 3 132 137 161 133 136 250 24 161]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant 9.5)
                                (emit/constant 0)
                                (emit/constant 100000)
                                (emit/constant 8)
                                (emit/constant 0.5)
                                (emit/constant 9)
                                (emit/constant -10)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value 9.5)
                                                    (emit/prim-call "isWhole")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "isWhole")
                                                    (emit/push-value 100000)
                                                    (emit/prim-call "isWhole")
                                                    (emit/prim-call "logicalAnd")
                                                    (emit/jz 3)
                                                    (emit/push-value 8)
                                                    (emit/push-value 0.5)
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value -10)
                                                    (emit/prim-call "isWhole")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test080IsPositive
  (let [expected [1 8 16 7 8 9 10 5 3 232 6 1 134 160 11 193 32 0 0 63 0 0 0 192 7 17 131 137 250 25 161 134 250 25 136 250 25 189 241 3 132 138 161 133 128 250 25 161]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant -10)
                                (emit/constant 10)
                                (emit/constant 100000)
                                (emit/constant 8)
                                (emit/constant 0.5)
                                (emit/constant 9)
                                (emit/constant 0)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value -10)
                                                    (emit/prim-call "isPositive")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 10)
                                                    (emit/prim-call "isPositive")
                                                    (emit/push-value 100000)
                                                    (emit/prim-call "isPositive")
                                                    (emit/prim-call "logicalAnd")
                                                    (emit/jz 3)
                                                    (emit/push-value 8)
                                                    (emit/push-value 0.5)
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value 0)
                                                    (emit/prim-call "isPositive")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test081IsNegative
  (let [expected [1 7 12 7 8 9 5 3 232 15 193 32 0 0 191 11 155 103 63 0 0 0 192 6 17 131 128 250 26 161 135 250 26 136 250 26 189 241 3 132 137 161 133 130 250 26 161]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant 0)
                                (emit/constant -10)
                                (emit/constant -0.54534)
                                (emit/constant 8)
                                (emit/constant 0.5)
                                (emit/constant 9)
                                (emit/constant -1)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value 0)
                                                    (emit/prim-call "isNegative")
                                                    (emit/prim-call "write")
                                                    (emit/push-value -10)
                                                    (emit/prim-call "isNegative")
                                                    (emit/push-value -0.54534)
                                                    (emit/prim-call "isNegative")
                                                    (emit/prim-call "logicalAnd")
                                                    (emit/jz 3)
                                                    (emit/push-value 8)
                                                    (emit/push-value 0.5)
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value -1)
                                                    (emit/prim-call "isNegative")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test082IsDivisibleBy
  (let [expected [1 9 20 5 7 8 9 64 5 3 232 15 193 112 0 0 192 64 0 0 63 0 0 0 192 8 21 132 134 131 250 27 161 131 129 250 27 137 138 250 27 189 241 3 133 139 161 134 135 133 250 27 161]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant 9)
                                (emit/constant 5)
                                (emit/constant 1)
                                (emit/constant -15)
                                (emit/constant -3)
                                (emit/constant 8)
                                (emit/constant 0.5)
                                (emit/constant 64)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value 9)
                                                    (emit/push-value 5)
                                                    (emit/prim-call "isDivisibleBy")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 5)
                                                    (emit/push-value 1)
                                                    (emit/prim-call "isDivisibleBy")
                                                    (emit/push-value -15)
                                                    (emit/push-value -3)
                                                    (emit/prim-call "isDivisibleBy")
                                                    (emit/prim-call "logicalAnd")
                                                    (emit/jz 3)
                                                    (emit/push-value 8)
                                                    (emit/push-value 0.5)
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value 64)
                                                    (emit/push-value 8)
                                                    (emit/prim-call "isDivisibleBy")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test083DelayS
  (let [expected [1 1 4 100 192 3 4 13 129 250 29 45]
        program (emit/program
                    :globals #{(emit/constant 100)
                                (emit/constant 1)}
                    :scripts [(emit/script
                                    :name "delayS"
                                    :running? true
                                    :delay 100
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/turn-on-pin 13)
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayS")
                                                    (emit/turn-off-pin 13)])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test084DelayM
  (let [expected [1 1 4 100 192 3 4 13 129 250 30 45]
        program (emit/program
                    :globals #{(emit/constant 100)
                                (emit/constant 1)}
                    :scripts [(emit/script
                                    :name "delayS"
                                    :running? true
                                    :delay 100
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/turn-on-pin 13)
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayM")
                                                    (emit/turn-off-pin 13)])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test085Minutes
  (let [expected [1 4 16 2 3 4 13 128 24 250 31 129 173 241 252 134 180 250 31 131 173 241 252 134 181 250 31 132 173 241 252 134 180 250 31 133 173 241 252 134 181]
        program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 1)
                                (emit/constant 13)
                                (emit/constant 2)
                                (emit/constant 3)
                                (emit/constant 4)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/prim-call "minutes")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz -4)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/prim-call "minutes")
                                                    (emit/push-value 2)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz -4)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/prim-call "minutes")
                                                    (emit/push-value 3)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz -4)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/prim-call "minutes")
                                                    (emit/push-value 4)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz -4)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test086Seconds
  (let [expected [1 4 16 2 3 4 13 128 24 169 129 173 241 252 134 180 169 131 173 241 252 134 181 169 132 173 241 252 134 180 169 133 173 241 252 134 181]
        program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 1)
                                (emit/constant 13)
                                (emit/constant 2)
                                (emit/constant 3)
                                (emit/constant 4)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/prim-call "seconds")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz -4)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/prim-call "seconds")
                                                    (emit/push-value 2)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz -4)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/prim-call "seconds")
                                                    (emit/push-value 3)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz -4)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/prim-call "seconds")
                                                    (emit/push-value 4)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz -4)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test087Millis
  (let [expected [1 5 4 13 17 3 232 7 208 11 184 15 160 128 24 184 132 173 241 252 131 180 184 133 173 241 252 131 181 184 134 173 241 252 131 180 184 135 173 241 252 131 181]
        program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 1000)
                                (emit/constant 13)
                                (emit/constant 2000)
                                (emit/constant 3000)
                                (emit/constant 4000)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/prim-call "millis")
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz -4)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/prim-call "millis")
                                                    (emit/push-value 2000)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz -4)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/prim-call "millis")
                                                    (emit/push-value 3000)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz -4)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/prim-call "millis")
                                                    (emit/push-value 4000)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz -4)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test088ScriptCallOverridingPrimitive
  (let [expected [2 2 4 13 5 3 232 192 4 4 131 128 193 186 32 2 10 255 0 160 241 3 255 0 181 240 2 255 0 180 255 1 183]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 13)
                                (emit/constant 0)}
                    :scripts [(emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/push-value 0)
                                                    (emit/script-call "toggle")
                                                    (emit/prim-call "pop")])
                                (emit/script
                                    :name "toggle"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "pin#1" 0)
                                                (emit/variable "delay#2" 0)]
                                    :locals []
                                    :instructions [(emit/read-local "pin#1")
                                                    (emit/prim-call "read")
                                                    (emit/jz 3)
                                                    (emit/read-local "pin#1")
                                                    (emit/prim-call "turnOff")
                                                    (emit/jmp 2)
                                                    (emit/read-local "pin#1")
                                                    (emit/prim-call "turnOn")
                                                    (emit/read-local "delay#2")
                                                    (emit/prim-call "delayMs")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test089DebuggerBreakpointHaltsAllScripts
  (let [expected [2 3 8 11 13 5 3 232 192 5 2 131 162 128 8 132 180 133 183 132 181 133 183]
        program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 11)
                                (emit/constant 0)
                                (emit/constant 13)}
                    :scripts [(emit/script
                                    :name "blink11"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 11)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "blink13"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "delayMs")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test090DebuggerBreakpointHaltsAreDeterministic
  (let [expected [4 7 24 0 7 9 10 11 13 7 60 35 215 10 128 7 132 160 128 172 241 2 136 180 192 6 10 131 137 166 147 131 129 172 241 2 128 147 192 1 2 135 162 128 6 133 131 161 132 128 161]
        program (emit/program
                    :globals #{(emit/variable "a" 0)
                                (emit/constant 0)
                                (emit/constant 7)
                                (emit/constant 13)
                                (emit/constant 10)
                                (emit/constant 0.01)
                                (emit/constant 1)
                                (emit/constant 11)
                                (emit/constant 9)}
                    :scripts [(emit/script
                                    :name "meta"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/prim-call "read")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "greaterThan")
                                                    (emit/jz 2)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOn")])
                                (emit/script
                                    :name "increment"
                                    :running? true
                                    :delay 10
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-global "a")
                                                    (emit/push-value 0.01)
                                                    (emit/prim-call "add")
                                                    (emit/write-global "a")
                                                    (emit/read-global "a")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "greaterThan")
                                                    (emit/jz 2)
                                                    (emit/push-value 0)
                                                    (emit/write-global "a")])
                                (emit/script
                                    :name "blink11"
                                    :running? true
                                    :delay 1
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 11)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "test"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 9)
                                                    (emit/read-global "a")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 7)
                                                    (emit/push-value 0)
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test091ChangingTheProgramResetsTheVMState
  (let [expected [1 2 4 13 5 3 232 128 8 131 180 132 183 131 181 132 183]
        program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)
                                (emit/constant 1000)}
                    :scripts [(emit/script
                                    :name "blink13"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "delayMs")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test092DebuggerSetAllBreakpoints
  (let [expected [1 0 128 4 13 11 43 45]
        program (emit/program
                    :globals #{(emit/constant 0)}
                    :scripts [(emit/script
                                    :name "test"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/turn-on-pin 13)
                                                    (emit/turn-on-pin 11)
                                                    (emit/turn-off-pin 11)
                                                    (emit/turn-off-pin 13)])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test093DebuggerSetAllBreakpointsWithMultipleScripts
  (let [expected [2 0 128 2 13 11 128 2 43 45]
        program (emit/program
                    :globals #{(emit/constant 0)}
                    :scripts [(emit/script
                                    :name "test1"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/turn-on-pin 13)
                                                    (emit/turn-on-pin 11)])
                                (emit/script
                                    :name "test2"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/turn-off-pin 11)
                                                    (emit/turn-off-pin 13)])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test094ProgramWithMultipleImports
  (let [expected [12 25 92 0 0 0 0 0 0 0 0 0 5 6 7 8 9 10 11 13 18 19 45 100 100 200 5 3 232 7 63 0 0 0 32 3 6 255 0 155 255 1 154 255 2 249 24 64 23 5 139 138 248 24 250 32 153 0 2 137 187 32 3 6 255 0 147 255 1 148 255 2 149 32 1 7 133 181 132 180 131 255 0 161 32 1 7 132 181 133 180 131 255 0 161 32 3 6 255 0 150 255 1 151 255 2 152 32 1 7 136 181 135 180 134 255 0 161 32 1 7 135 181 136 180 134 255 0 161 128 17 248 21 248 20 248 25 192 186 209 140 142 143 195 186 141 248 18 248 16 198 186 254 9 192 17 64 194 128 170 241 7 129 196 186 129 199 186 240 53 194 248 23 172 241 7 129 196 186 129 199 186 240 42 194 248 22 172 241 7 248 27 196 186 248 27 199 186 240 31 250 20 248 27 174 241 14 194 248 22 174 241 9 248 27 196 186 248 27 200 186 248 26 183 240 243 240 13 194 248 22 174 241 9 248 27 199 186 248 27 197 186 248 26 183 240 243 192 26 2 248 19 162]
        program (emit/program
                    :globals #{(emit/variable "sonar.trigPin" 0)
                                (emit/variable "sonar.echoPin" 0)
                                (emit/variable "sonar.maxDistance" 100)
                                (emit/variable "sonar.distance" 0)
                                (emit/variable "leftMotor.enablePin" 0)
                                (emit/variable "leftMotor.forwardPin" 0)
                                (emit/variable "leftMotor.reversePin" 0)
                                (emit/variable "rightMotor.enablePin" 0)
                                (emit/variable "rightMotor.forwardPin" 0)
                                (emit/variable "rightMotor.reversePin" 0)
                                (emit/constant 0)
                                (emit/constant 100)
                                (emit/constant 19)
                                (emit/constant 18)
                                (emit/constant 200)
                                (emit/constant 5)
                                (emit/constant 7)
                                (emit/constant 8)
                                (emit/constant 6)
                                (emit/constant 11)
                                (emit/constant 9)
                                (emit/constant 10)
                                (emit/constant 1)
                                (emit/constant 45)
                                (emit/constant 0.5)
                                (emit/constant 1000)
                                (emit/constant 13)}
                    :scripts [(emit/script
                                    :name "sonar.init"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "trig#1" 0)
                                                (emit/variable "echo#2" 0)
                                                (emit/variable "maxDist#3" 0)]
                                    :locals []
                                    :instructions [(emit/read-local "trig#1")
                                                    (emit/write-global "sonar.trigPin")
                                                    (emit/read-local "echo#2")
                                                    (emit/write-global "sonar.echoPin")
                                                    (emit/read-local "maxDist#3")
                                                    (emit/write-global "sonar.maxDistance")])
                                (emit/script
                                    :name "sonar.reading"
                                    :running? false
                                    :delay 100
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-global "sonar.trigPin")
                                                    (emit/read-global "sonar.echoPin")
                                                    (emit/read-global "sonar.maxDistance")
                                                    (emit/prim-call "sonarDistCm")
                                                    (emit/write-global "sonar.distance")])
                                (emit/script
                                    :name "sonar.distance_cm"
                                    :running? false
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-global "sonar.distance")
                                                    (emit/prim-call "retv")])
                                (emit/script
                                    :name "leftMotor.init"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "en#4" 0)
                                                (emit/variable "f#5" 0)
                                                (emit/variable "r#6" 0)]
                                    :locals []
                                    :instructions [(emit/read-local "en#4")
                                                    (emit/write-global "leftMotor.enablePin")
                                                    (emit/read-local "f#5")
                                                    (emit/write-global "leftMotor.forwardPin")
                                                    (emit/read-local "r#6")
                                                    (emit/write-global "leftMotor.reversePin")])
                                (emit/script
                                    :name "leftMotor.forward"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "speed#7" 0)]
                                    :locals []
                                    :instructions [(emit/read-global "leftMotor.reversePin")
                                                    (emit/prim-call "turnOff")
                                                    (emit/read-global "leftMotor.forwardPin")
                                                    (emit/prim-call "turnOn")
                                                    (emit/read-global "leftMotor.enablePin")
                                                    (emit/read-local "speed#7")
                                                    (emit/prim-call "write")])
                                (emit/script
                                    :name "leftMotor.backward"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "speed#8" 0)]
                                    :locals []
                                    :instructions [(emit/read-global "leftMotor.forwardPin")
                                                    (emit/prim-call "turnOff")
                                                    (emit/read-global "leftMotor.reversePin")
                                                    (emit/prim-call "turnOn")
                                                    (emit/read-global "leftMotor.enablePin")
                                                    (emit/read-local "speed#8")
                                                    (emit/prim-call "write")])
                                (emit/script
                                    :name "rightMotor.init"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "en#9" 0)
                                                (emit/variable "f#10" 0)
                                                (emit/variable "r#11" 0)]
                                    :locals []
                                    :instructions [(emit/read-local "en#9")
                                                    (emit/write-global "rightMotor.enablePin")
                                                    (emit/read-local "f#10")
                                                    (emit/write-global "rightMotor.forwardPin")
                                                    (emit/read-local "r#11")
                                                    (emit/write-global "rightMotor.reversePin")])
                                (emit/script
                                    :name "rightMotor.forward"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "speed#12" 0)]
                                    :locals []
                                    :instructions [(emit/read-global "rightMotor.reversePin")
                                                    (emit/prim-call "turnOff")
                                                    (emit/read-global "rightMotor.forwardPin")
                                                    (emit/prim-call "turnOn")
                                                    (emit/read-global "rightMotor.enablePin")
                                                    (emit/read-local "speed#12")
                                                    (emit/prim-call "write")])
                                (emit/script
                                    :name "rightMotor.backward"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "speed#13" 0)]
                                    :locals []
                                    :instructions [(emit/read-global "rightMotor.forwardPin")
                                                    (emit/prim-call "turnOff")
                                                    (emit/read-global "rightMotor.reversePin")
                                                    (emit/prim-call "turnOn")
                                                    (emit/read-global "rightMotor.enablePin")
                                                    (emit/read-local "speed#13")
                                                    (emit/prim-call "write")])
                                (emit/script
                                    :name "setup"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 19)
                                                    (emit/push-value 18)
                                                    (emit/push-value 200)
                                                    (emit/script-call "sonar.init")
                                                    (emit/prim-call "pop")
                                                    (emit/start "sonar.reading")
                                                    (emit/push-value 5)
                                                    (emit/push-value 7)
                                                    (emit/push-value 8)
                                                    (emit/script-call "leftMotor.init")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 6)
                                                    (emit/push-value 11)
                                                    (emit/push-value 9)
                                                    (emit/script-call "rightMotor.init")
                                                    (emit/prim-call "pop")
                                                    (emit/stop "setup")])
                                (emit/script
                                    :name "move"
                                    :running? true
                                    :delay 10
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/script-call "sonar.distance_cm")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 7)
                                                    (emit/push-value 1)
                                                    (emit/script-call "leftMotor.forward")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 1)
                                                    (emit/script-call "rightMotor.forward")
                                                    (emit/prim-call "pop")
                                                    (emit/jmp 53)
                                                    (emit/script-call "sonar.distance_cm")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "greaterThan")
                                                    (emit/jz 7)
                                                    (emit/push-value 1)
                                                    (emit/script-call "leftMotor.forward")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 1)
                                                    (emit/script-call "rightMotor.forward")
                                                    (emit/prim-call "pop")
                                                    (emit/jmp 42)
                                                    (emit/script-call "sonar.distance_cm")
                                                    (emit/push-value 45)
                                                    (emit/prim-call "greaterThan")
                                                    (emit/jz 7)
                                                    (emit/push-value 0.5)
                                                    (emit/script-call "leftMotor.forward")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 0.5)
                                                    (emit/script-call "rightMotor.forward")
                                                    (emit/prim-call "pop")
                                                    (emit/jmp 31)
                                                    (emit/prim-call "random")
                                                    (emit/push-value 0.5)
                                                    (emit/prim-call "lessThan")
                                                    (emit/jz 14)
                                                    (emit/script-call "sonar.distance_cm")
                                                    (emit/push-value 45)
                                                    (emit/prim-call "lessThan")
                                                    (emit/jz 9)
                                                    (emit/push-value 0.5)
                                                    (emit/script-call "leftMotor.forward")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 0.5)
                                                    (emit/script-call "rightMotor.backward")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "delayMs")
                                                    (emit/jmp -13)
                                                    (emit/jmp 13)
                                                    (emit/script-call "sonar.distance_cm")
                                                    (emit/push-value 45)
                                                    (emit/prim-call "lessThan")
                                                    (emit/jz 9)
                                                    (emit/push-value 0.5)
                                                    (emit/script-call "rightMotor.forward")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 0.5)
                                                    (emit/script-call "leftMotor.backward")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "delayMs")
                                                    (emit/jmp -13)])
                                (emit/script
                                    :name "blink13"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test095ScriptWith127Instructions
  (let [expected [1 3 8 13 100 5 3 232 128 127 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 133 183 216]
        program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)
                                (emit/constant 100)
                                (emit/constant 1000)}
                    :scripts [(emit/script
                                    :name "test"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "delayMs")
                                                    (emit/resume "test")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test096ScriptWith128Instructions
  (let [expected [1 2 8 13 100 128 128 128 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183]
        program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)
                                (emit/constant 100)}
                    :scripts [(emit/script
                                    :name "test"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test097ScriptWith512Instructions
  (let [expected [1 2 8 13 100 128 130 0 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183 131 162 132 183]
        program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)
                                (emit/constant 100)}
                    :scripts [(emit/script
                                    :name "test"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

(deftest Test098criptWith255Instructions
  (let [expected [1 1 4 13 128 128 255 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 129 183 131 162 216]
        program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)
                                (emit/constant 1)}
                    :scripts [(emit/script
                                    :name "test"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/resume "test")])])
        actual (en/encode program)]
    (is (= expected actual))
    (write-file program)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; HACK(Richo): The following are variations of some of the previous tests, they
; should NOT be converted to input programs for the VM tests.

(deftest Test043ForLoop_uzi-src
  (let [expected [1 2 8 7 11 144 1 0 13 131 255 128 255 0 132 175 241 7 255 0 180 255 0 129 166 255 128 240 245]
        program (compile-string "task for() running { for i = 7 to 11 { turnOn(i); }}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test044ReversedForLoop_uzi-src
  (let [expected [1 2 8 7 11 144 1 0 13 132 255 128 255 0 131 173 241 7 255 0 180 255 0 130 166 255 128 240 245]
        program (compile-string "task for() running { for i = 11 to 7 by -1 { turnOn(i); }}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test045ForLoopWithoutConstantStep_uzi-src
  (let [expected [1 3 12 1 7 11 144 2 0 0 20 132 255 128 255 0 133 131 255 129 255 1 128 245 2 175 240 1 173 241 7 255 0 180 255 0 255 1 166 255 128 240 238]
        program (compile-string "
        	var step = 1;

        	task for() running {
        		for i = 7 to 11 by step {
        			turnOn(i);
        		}
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test046ReverseForLoopWithoutConstantStep_uzi-src
  (let [expected [1 3 8 7 11 7 191 128 0 0 144 2 0 0 20 132 255 128 255 0 131 133 255 129 255 1 128 245 2 175 240 1 173 241 7 255 0 180 255 0 255 1 166 255 128 240 238]
        program (compile-string "
        	var step = -1;

        	task for() running {
        		for i = 11 to 7 by step {
        			turnOn(i);
        		}
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test047ForLoopShouldOnlyEvaluateStepOncePerIteration_uzi-src
  (let [expected [3 3 4 13 11 193 32 0 0 191 128 0 0 0 6 133 130 165 149 133 187 0 6 132 130 165 148 132 187 144 2 0 0 21 128 255 128 255 0 193 192 255 129 255 1 128 245 2 175 240 1 173 241 8 131 255 0 161 255 0 255 1 166 255 128 240 237]
        program (compile-string "
        	var step = -1;
        	var stop = -10;

        	func negatedStep() {
        		step = step * -1;
        		return step;
        	}

        	func negatedStop() {
        		stop = stop * -1;
        		return stop;
        	}

        	task for() running {
        		for i = 0 to negatedStop() by negatedStep() {
        			write(D13, i);
        		}
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test048MutexShouldGuaranteeACriticalSection_uzi-src
  (let [expected [5 8 12 0 11 13 9 3 232 7 208 15 191 128 0 0 191 0 0 0 62 128 0 0 0 12 131 128 170 136 188 170 190 241 248 129 147 188 152 0 4 128 147 130 152 192 6 2 133 162 144 1 0 20 192 186 128 255 128 255 0 129 175 241 10 132 255 0 161 134 183 255 0 138 166 255 128 240 242 193 186 144 1 0 20 192 186 129 255 128 255 0 128 173 241 10 132 255 0 161 135 183 255 0 137 166 255 128 240 242 193 186]
        program (compile-string "
        	import m from 'Mutex.uzi';

        	task blink() running 1/s { toggle(D13); }

        	task test1() running {
        		m.acquire();
        		for a = 0 to 1 by 0.25 {
        			write(D11, a);
        			delayMs(1000);
        		}
        		m.release();
        	}

        	task test2() running {
        		m.acquire();
        		for a = 1 to 0 by -0.5 {
        			write(D11, a);
        			delayMs(2000);
        		}
        		m.release();
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test049ChannelShouldDeadlockIfConsumingFromTheSameTaskAsProducer_uzi-src
  (let [expected [4 7 16 0 0 11 13 5 3 232 11 191 128 0 0 191 128 0 0 32 1 27 188 137 171 241 8 137 130 170 241 3 188 153 182 240 244 131 128 171 242 252 130 153 182 255 0 148 129 147 131 128 171 242 252 0 23 188 136 171 241 8 136 130 170 241 3 188 152 182 240 244 131 129 171 242 252 130 152 182 128 147 132 187 192 7 2 134 162 128 7 133 180 193 192 186 133 162]
        program (compile-string "
        	import c from 'Channel.uzi';

        	task blink() running 1/s { toggle(D13); }

        	task cp() running {
        		turnOn(D11);
        		c.send(c.receive());
        		toggle(D11);
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test050ChannelWithMultipleProducersAndNoConsumerShouldBlockAllProducers_uzi-src
  (let [expected [6 10 24 0 0 2 3 11 13 5 3 232 15 191 128 0 0 63 0 0 0 63 0 0 0 32 1 27 188 138 171 241 8 138 130 170 241 3 188 154 182 240 244 131 128 171 242 252 130 154 182 255 0 148 129 147 131 128 171 242 252 128 5 129 192 186 129 156 128 5 128 192 186 133 156 128 5 139 192 186 134 156 192 9 2 136 162 128 3 135 140 161]
        program (compile-string "
        	import c from 'Channel.uzi';
        	var counter = 0.5;

        	task producer1() running {
        		c.send(1);
        		counter = 1;
        	}

        	task producer0() running {
        		c.send(0);
        		counter = 2;
        	}

        	task producer05() running {
        		c.send(0.5);
        		counter = 3;
        	}

        	task blink() running 1/s { toggle(D13); }

        	task test() running { write(D11, counter); }")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test051ChannelWithOneProducerAndOneConsumerBlocksTheProducerAtTheRateOfConsumer_uzi-src
  (let [expected [4 7 16 0 0 11 13 5 3 232 11 191 128 0 0 191 128 0 0 32 1 27 188 137 171 241 8 137 130 170 241 3 188 153 182 240 244 131 128 171 242 252 130 153 182 255 0 148 129 147 131 128 171 242 252 0 23 188 136 171 241 8 136 130 170 241 3 188 152 182 240 244 131 129 171 242 252 130 152 182 128 147 132 187 144 1 1 11 255 0 192 186 129 255 0 168 255 128 133 255 0 161 240 245 192 7 3 134 193 161]
        program (compile-string "
        	import c from 'Channel.uzi';

        	task producer() running {
        		var a = 1;
        		forever {
        			c.send(a);
        			a = 1 - a;
        			write(D11, a);
        		}
        	}

        	task consumer() running 1/s {
        		write(D13, c.receive());
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test052ChannelWithMultipleProducersAndOneConsumer_uzi-src
  (let [expected [9 10 16 0 0 11 13 5 3 232 23 191 128 0 0 191 128 0 0 62 128 0 0 63 0 0 0 63 64 0 0 32 1 27 188 137 171 241 8 137 130 170 241 3 188 153 182 240 244 131 128 171 242 252 130 153 182 255 0 148 129 147 131 128 171 242 252 0 23 188 136 171 241 8 136 130 170 241 3 188 152 182 240 244 131 129 171 242 252 130 152 182 128 147 132 187 192 7 2 134 162 128 3 128 192 186 128 3 138 192 186 128 3 139 192 186 128 3 140 192 186 128 3 129 192 186 192 7 3 133 193 161]
        program (compile-string "
        	import c from 'Channel.uzi';

        	task blink() running 1/s { toggle(D13); }

        	task producer1() running { c.send(0); }
        	task producer2() running { c.send(0.25); }
        	task producer3() running { c.send(0.5); }
        	task producer4() running { c.send(0.75); }
        	task producer5() running { c.send(1); }

        	task consumer() running 1/s { write(D11, c.receive()); }")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test053ChannelWithMultipleConsumersAndOneProducer_uzi-src
  (let [expected [7 10 24 0 0 10 11 12 13 5 3 232 15 191 128 0 0 191 128 0 0 62 128 0 0 32 1 27 188 139 171 241 8 139 130 170 241 3 188 155 182 240 244 131 128 171 242 252 130 155 182 255 0 148 129 147 131 128 171 242 252 0 23 188 138 171 241 8 138 130 170 241 3 188 154 182 240 244 131 129 171 242 252 130 154 182 128 147 132 187 128 3 136 193 161 128 3 133 193 161 128 3 134 193 161 128 3 135 193 161 144 1 0 16 128 255 128 255 0 129 175 241 10 255 0 192 186 137 183 255 0 140 166 255 128 240 242]
        program (compile-string "
        	import c from 'Channel.uzi';

        	task consumer1() running { write(D13, c.receive()); }
        	task consumer2() running { write(D10, c.receive()); }
        	task consumer3() running { write(D11, c.receive()); }
        	task consumer4() running { write(D12, c.receive()); }


        	task consumer() running {
        		for a = 0 to 1 by 0.25 {
        			c.send(a);
        			delayMs(1000);
        		}
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test054VariablesWithTheSameNameInDifferentScopesShouldNotInterfereWithEachOther_uzi-src
  (let [expected [1 3 8 6 7 5 3 232 208 5 2 4 0 10 129 241 2 255 0 162 255 1 131 166 255 129 255 1 162]
        program (compile-string "
        	\"Pin 7 should blink once per second.
        	Pin 6 should blink once per second.\"
        	task main() running 1/s {
        		if 1 {
        			var pin = 7;
        			toggle(pin);
        		}
        		var pin;
        		pin = pin + 6;
        		toggle(pin);
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test055VariablesWithTheSameNameInDifferentScopesShouldNotInterfereWithEachOther_uzi-src
  (let [expected [1 3 8 6 7 5 3 232 208 5 2 4 3 6 129 241 2 255 0 162 255 1 162]
        program (compile-string "
        	\"Pin 7 should blink once per second.
        	Pin 6 should blink once per second.\"
        	task main() running 1/s {
        		if 1 {
        			var pin = 7;
        			toggle(pin);
        		}
        		var pin = 6;
        		toggle(pin);
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test056Round_uzi-src
  (let [expected [1 7 12 10 11 12 5 3 232 15 62 128 0 0 63 0 0 0 63 64 0 0 192 6 12 131 135 250 2 161 132 136 250 2 161 133 137 250 2 161]
        program (compile-string "
        	task main() running 1/s {
        		write(D10, round(0.25));
        		write(D11, round(0.5));
        		write(D12, round(0.75));
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test057Ceil_uzi-src
  (let [expected [1 7 12 10 11 12 5 3 232 15 62 128 0 0 63 0 0 0 63 64 0 0 192 6 12 131 135 250 3 161 132 136 250 3 161 133 137 250 3 161]
        program (compile-string "
        	task main() running 1/s {
        		write(D10, ceil(0.25));
        		write(D11, ceil(0.5));
        		write(D12, ceil(0.75));
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test058Floor_uzi-src
  (let [expected [1 7 12 10 11 12 5 3 232 15 62 128 0 0 63 0 0 0 63 64 0 0 192 6 12 131 135 250 4 161 132 136 250 4 161 133 137 250 4 161]
        program (compile-string "
        	task main() running 1/s {
        		write(D10, floor(0.25));
        		write(D11, floor(0.5));
        		write(D12, floor(0.75));
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test059Sqrt_uzi-src
  (let [expected [1 3 4 9 5 3 232 7 62 128 0 0 192 4 4 131 133 250 5 161]
        program (compile-string "
        	task main() running 1/s {
        		write(D9, sqrt(0.25));
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test060Abs_uzi-src
  (let [expected [1 6 12 9 10 13 5 3 232 11 191 0 0 0 63 0 0 0 192 6 12 133 130 250 6 161 131 135 250 6 161 132 136 250 6 161]
        program (compile-string "
        	task main() running 1/s {
        		write(D13, abs(-1));
        		write(D9, abs(-0.5));
        		write(D10, abs(0.5));
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test061NaturalLogarithm_uzi-src
  (let [expected [1 7 20 2 3 7 8 9 5 3 232 7 62 69 200 96 192 8 14 133 129 250 7 161 134 131 250 7 137 168 161 135 132 250 7 161]
        program (compile-string "
        	task main() running 1/s {
        		write(D7, ln(1)); \"0\"
        		write(D8, ln(2) - 0.1931471805599453); \"0.5\"
        		write(D9, ln(3)); \"1.09\"
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test062Log10_uzi-src
  (let [expected [1 7 20 3 7 8 9 10 5 3 232 7 60 187 108 53 192 8 14 132 129 250 8 161 133 131 250 8 137 166 161 134 135 250 8 161]
        program (compile-string "
        	task main() running 1/s {
        		write(D7, log10(1)); \"0\"
        		write(D8, log10(3) + 0.02287874528033756); \"0.5\"
        		write(D9, log10(10)); \"1\"
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test063Exp_uzi-src
  (let [expected [1 6 12 7 8 9 5 3 232 11 193 93 12 85 191 49 114 24 192 6 12 131 135 250 9 161 132 136 250 9 161 133 128 250 9 161]
        program (compile-string "
        	task main() running 1/s {
        		write(D7, exp(-13.81551055796427)); \"0\"
        		write(D8, exp(-0.693147180559945)); \"0.5\"
        		write(D9, exp(0)); \"1\"
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test064Pow10_uzi-src
  (let [expected [1 6 12 7 8 9 5 3 232 11 192 64 0 0 190 154 28 172 192 6 12 131 135 250 10 161 132 136 250 10 161 133 128 250 10 161]
        program (compile-string "
        	task main() running 1/s {
        		write(D7, pow10(-3)); \"0.001\"
        		write(D8, pow10(-0.301)); \"0.5000345349769785\"
        		write(D9, pow10(0)); \"1\"
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test065IsCloseTo_uzi-src
  (let [expected [1 9 20 2 10 11 12 13 5 3 232 15 63 128 0 84 64 0 16 98 127 128 0 0 192 8 24 129 137 250 28 241 3 135 180 240 2 135 181 134 128 128 250 28 161 133 131 138 250 28 161 132 139 139 250 28 161]
        program (compile-string "
        	\"D13 -> ON
        	D12 -> ON
        	D11 -> OFF
        	D10 -> ON\"
        	task main() running 1/s {
        		if isCloseTo(1, 1.00001) {
        			turnOn(D13);
        		} else {
        			turnOff(D13);
        		}

        		write(D12, isCloseTo(0, 0));
        		write(D11, isCloseTo(2, 2.001));
        		write(D10, isCloseTo(Infinity, Infinity));
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test066Asin_uzi-src
  (let [expected [1 6 12 7 8 9 5 3 232 11 191 201 15 219 62 245 194 143 192 6 14 131 128 250 11 161 132 136 250 11 161 133 130 250 11 135 250 28 161]
        program (compile-string "
        	task main() running 1/s {
        		write(D7, asin(0)); \"0\"
        		write(D8, asin(0.48)); \"0.500654712404588\"
        		write(D9, isCloseTo(asin(-1), -1.570796326794897)); \"1\"
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test067Acos_uzi-src
  (let [expected [1 6 12 7 8 9 5 3 232 11 63 96 182 11 63 201 15 219 192 6 14 131 129 250 12 161 132 135 250 12 161 133 128 250 12 136 250 28 161]
        program (compile-string "
        	task main() running 1/s {
        		write(D7, acos(1)); \"0\"
        		write(D8, acos(0.8777777777)); \"0.4995926612045067\"
        		write(D9, isCloseTo(acos(0), 1.570796326794897)); \"1\"
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test068Atan_uzi-src
  (let [expected [1 6 12 7 8 9 5 3 232 11 63 11 224 223 63 202 61 113 192 6 12 131 128 250 13 161 132 135 250 13 161 133 136 250 13 161]
        program (compile-string "
        	task main() running 1/s {
        		write(D7, atan(0)); \"0\"
        		write(D8, atan(0.5464)); \"0.5000750944782615\"
        		write(D9, atan(1.58)); \"1.006528137936965\"
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test069Power_uzi-src
  (let [expected [1 6 16 2 7 8 9 5 3 232 7 63 53 4 243 192 7 15 132 128 129 250 14 161 133 136 131 250 14 161 134 129 128 250 14 161]
        program (compile-string "
        	task main() running 1/s {
        		write(D7, 0**1); \"0\"
        		write(D8, 0.7071067811865475**2); \"0.5\"
        		write(D9, 1**0); \"1\"
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test070IsOn_uzi-src
  (let [expected [1 2 4 13 5 3 232 192 4 8 131 250 15 241 3 131 181 240 2 131 180]
        program (compile-string "
        	task main() running 1/s {
        		if isOn(D13) {
        			turnOff(D13);
        		} else {
        			turnOn(D13);
        		}
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test071IsOff_uzi-src
  (let [expected [1 2 4 13 5 3 232 192 4 8 131 250 16 241 3 131 180 240 2 131 181]
        program (compile-string "
        	task main() running 1/s {
        		if isOff(D13) {
        			turnOn(D13);
        		} else {
        			turnOff(D13);
        		}
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test072Mod_uzi-src
  (let [expected [1 8 28 0 2 3 10 11 12 13 5 3 232 192 10 32 131 133 250 17 147 131 128 170 241 2 137 162 131 129 170 241 2 136 162 131 132 170 241 2 135 162 131 133 170 241 2 134 162 131 129 166 147]
        program (compile-string "
        	var a = 0;
        	task main() running 1/s {
        		a = a % 3;
        		if a == 0 { toggle(D13); }
        		if a == 1 { toggle(D12); }
        		if a == 2 { toggle(D11); }
        		if a == 3 { toggle(D10); }
        		a = a + 1;
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test073Constrain_uzi-src
  (let [expected [1 9 20 5 7 8 9 10 5 3 232 15 193 32 0 0 192 64 0 0 63 0 0 0 192 8 22 132 137 138 131 250 18 138 170 161 133 139 138 131 250 18 161 134 135 138 131 250 18 131 170 161]
        program (compile-string "
        	task main() running 1/s {
        		write(D7, constrain(-10, -3, 5) == -3);
        		write(D8, constrain(0.5, -3, 5));
        		write(D9, constrain(10, -3, 5) == 5);
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test074RandomInt_uzi-src
  (let [expected [1 5 8 0 13 5 3 232 6 1 134 160 7 199 195 80 0 208 5 1 0 23 135 134 250 19 255 128 255 0 131 171 255 0 135 173 189 255 0 134 175 189 241 3 132 180 240 2 132 181 255 0 147]
        program (compile-string "
        	var old = 0;
        	task main() running 1/s {
        		var a = randomInt(-100000, 100000);
        		if (a != old && a >= -100000 && a <= 100000) {
        			turnOn(D13);
        		} else {
        			turnOff(D13);
        		}
        		old = a;
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test075Random_uzi-src
  (let [expected [1 3 8 0 13 5 3 232 208 5 1 0 21 250 20 255 128 255 0 131 171 255 0 128 173 189 255 0 129 175 189 241 3 132 180 240 2 132 181 255 0 147]
        program (compile-string "
        	var old = 0;
        	task main() running 1/s {
        		var a = random();
        		if (a != old && a >= 0 && a <= 1) {
        			turnOn(D13);
        		} else {
        			turnOff(D13);
        		}
        		old = a;
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test076IsEven_uzi-src
  (let [expected [1 7 16 2 7 8 9 5 3 232 11 192 0 0 0 63 0 0 0 192 7 17 132 129 250 21 161 131 250 21 136 250 21 189 241 3 133 137 161 134 128 250 21 161]
        program (compile-string "
        	task main() running 1/s {
        		write(D7, isEven(1));
        		if isEven(2) && isEven(-2) { write(D8, 0.5); }
        		write(D9, isEven(0));
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test077IsOdd_uzi-src
  (let [expected [1 6 16 3 7 8 9 5 3 232 7 63 0 0 0 192 7 17 132 128 250 22 161 129 250 22 130 250 22 189 241 3 133 136 161 134 131 250 22 161]
        program (compile-string "
        	task main() running 1/s {
        		write(D7, isOdd(0));
        		if isOdd(1) && isOdd(-1) { write(D8, 0.5); }
        		write(D9, isOdd(3));
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test078IsPrime_uzi-src
  (let [expected [1 8 24 2 3 5 7 8 9 5 3 232 7 63 0 0 0 192 9 17 134 136 250 23 161 131 250 23 132 250 23 189 241 3 135 138 161 136 133 250 23 161]
        program (compile-string "
        	task main() running 1/s {
        		write(D7, isPrime(9));
        		if isPrime(2) && isPrime(3) { write(D8, 0.5); }
        		write(D9, isPrime(5));
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test079IsWhole_uzi-src
  (let [expected [1 8 12 7 8 9 5 3 232 6 1 134 160 15 193 32 0 0 63 0 0 0 65 24 0 0 192 6 17 131 138 250 24 161 128 250 24 135 250 24 189 241 3 132 137 161 133 136 250 24 161]
        program (compile-string "
        	task main() running 1/s {
        		write(D7, isWhole(9.5));
        		if isWhole(0) && isWhole(100000) { write(D8, 0.5); }
        		write(D9, isWhole(-10));
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test080IsPositive_uzi-src
  (let [expected [1 8 16 7 8 9 10 5 3 232 6 1 134 160 11 193 32 0 0 63 0 0 0 192 7 17 131 137 250 25 161 134 250 25 136 250 25 189 241 3 132 138 161 133 128 250 25 161]
        program (compile-string "
        	task main() running 1/s {
        		write(D7, isPositive(-10));
        		if isPositive(10) && isPositive(100000) { write(D8, 0.5); }
        		write(D9, isPositive(0));
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test081IsNegative_uzi-src
  (let [expected [1 7 12 7 8 9 5 3 232 15 193 32 0 0 191 11 155 103 63 0 0 0 192 6 17 131 128 250 26 161 135 250 26 136 250 26 189 241 3 132 137 161 133 130 250 26 161]
        program (compile-string "
        	task main() running 1/s {
        		write(D7, isNegative(0));
        		if isNegative(-10) && isNegative(-0.54534) { write(D8, 0.5); }
        		write(D9, isNegative(-1));
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test082IsDivisibleBy_uzi-src
  (let [expected [1 9 20 5 7 8 9 64 5 3 232 15 193 112 0 0 192 64 0 0 63 0 0 0 192 8 21 132 134 131 250 27 161 131 129 250 27 137 138 250 27 189 241 3 133 139 161 134 135 133 250 27 161]
        program (compile-string "
        	task main() running 1/s {
        		write(D7, isDivisibleBy(9, 5));
        		if isDivisibleBy(5, 1) && isDivisibleBy(-15, -3) { write(D8, 0.5); }
        		write(D9, isDivisibleBy(64, 8));
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test085Minutes_uzi-src
  (let [expected [1 4 16 2 3 4 13 128 24 250 31 129 173 241 252 134 180 250 31 131 173 241 252 134 181 250 31 132 173 241 252 134 180 250 31 133 173 241 252 134 181]
        program (compile-string "
        	task main() running {
        		until minutes() >= 1;
        		turnOn(D13);
        		until minutes() >= 2;
        		turnOff(D13);
        		until minutes() >= 3;
        		turnOn(D13);
        		until minutes() >= 4;
        		turnOff(D13);
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test086Seconds_uzi-src
  (let [expected [1 4 16 2 3 4 13 128 24 169 129 173 241 252 134 180 169 131 173 241 252 134 181 169 132 173 241 252 134 180 169 133 173 241 252 134 181]
        program (compile-string "
        	task main() running {
        		until seconds() >= 1;
        		turnOn(D13);
        		until seconds() >= 2;
        		turnOff(D13);
        		until seconds() >= 3;
        		turnOn(D13);
        		until seconds() >= 4;
        		turnOff(D13);
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test087Millis_uzi-src
  (let [expected [1 5 4 13 17 3 232 7 208 11 184 15 160 128 24 184 132 173 241 252 131 180 184 133 173 241 252 131 181 184 134 173 241 252 131 180 184 135 173 241 252 131 181]
        program (compile-string "
        	task main() running {
        		until millis() >= 1000;
        		turnOn(D13);
        		until millis() >= 2000;
        		turnOff(D13);
        		until millis() >= 3000;
        		turnOn(D13);
        		until millis() >= 4000;
        		turnOff(D13);
        	}")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test088ScriptCallOverridingPrimitive_uzi-src
  (let [expected [2 2 4 13 5 3 232 192 4 4 131 128 193 186 32 2 10 255 0 160 241 3 255 0 181 240 2 255 0 180 255 1 183]
        program (compile-string "
        task blink() running 1/s { toggle(D13, 0); }

        proc toggle(pin, delay)  {
        	if read(pin) { turnOff(pin); }
        	else { turnOn(pin); }
        	delayMs(delay);
        }")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test089DebuggerBreakpointHaltsAllScripts_uzi-src
  (let [expected [2 3 8 11 13 5 3 232 192 5 2 131 162 128 8 132 180 133 183 132 181 133 183]
        program (compile-string "
        task blink11() running 1/s {
        	toggle(D11);
        }

        task blink13() running {
        	turnOn(D13);
        	delayMs(1000);
        	turnOff(D13);
        	delayMs(1000);
        }")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test091ChangingTheProgramResetsTheVMState_uzi-src
  (let [expected [1 2 4 13 5 3 232 128 8 131 180 132 183 131 181 132 183]
        program (compile-string "
        task blink13() running {
        	turnOn(D13);
        	delayMs(1000);
        	turnOff(D13);
        	delayMs(1000);
        }")
        actual (en/encode program)]
    (is (= expected actual))))

(deftest Test094ProgramWithMultipleImports_uzi-src
  (let [expected [12 25 92 0 0 0 0 0 0 0 0 0 5 6 7 8 9 10 11 13 18 19 45 100 100 200 5 3 232 7 63 0 0 0 32 3 6 255 0 155 255 1 154 255 2 249 24 64 23 5 139 138 248 24 250 32 153 0 2 137 187 32 3 6 255 0 147 255 1 148 255 2 149 32 1 7 133 181 132 180 131 255 0 161 32 1 7 132 181 133 180 131 255 0 161 32 3 6 255 0 150 255 1 151 255 2 152 32 1 7 136 181 135 180 134 255 0 161 32 1 7 135 181 136 180 134 255 0 161 128 17 248 21 248 20 248 25 192 186 209 140 142 143 195 186 141 248 18 248 16 198 186 254 9 192 17 64 194 128 170 241 7 129 196 186 129 199 186 240 53 194 248 23 172 241 7 129 196 186 129 199 186 240 42 194 248 22 172 241 7 248 27 196 186 248 27 199 186 240 31 250 20 248 27 174 241 14 194 248 22 174 241 9 248 27 196 186 248 27 200 186 248 26 183 240 243 240 13 194 248 22 174 241 9 248 27 199 186 248 27 197 186 248 26 183 240 243 192 26 2 248 19 162]
        program (compile-string "
        import sonar from 'Sonar.uzi';
        import leftMotor from 'DCMotor.uzi';
        import rightMotor from 'DCMotor.uzi';

        task setup() {
        	sonar.init(trig: A5, echo: A4, maxDist: 200);
        	start sonar.reading;
        	leftMotor.init(en: D5, f: D7, r: D8);
        	rightMotor.init(en: D6, f: D11, r: D9);
        }

        task move() running 100/s {
        	if (sonar.distance_cm() == 0) {
        		leftMotor.forward(speed: 1);
        		rightMotor.forward(speed: 1);
        	} else {
        		if (sonar.distance_cm() > 100) {
        			leftMotor.forward(speed: 1);
        			rightMotor.forward(speed: 1);
        		} else {
        			if (sonar.distance_cm() > 45) {
        				leftMotor.forward(speed: 0.5);
        				rightMotor.forward(speed: 0.5);
        			} else {
        				if (random() < 0.5) {
        					while (sonar.distance_cm() < 45) {
        						leftMotor.forward(speed: 0.5);
        						rightMotor.backward(speed: 0.5);
        						delayMs(1000);
        					}
        				} else {
        					while (sonar.distance_cm() < 45) {
        						rightMotor.forward(speed: 0.5);
        						leftMotor.backward(speed: 0.5);
        						delayMs(1000);
        					}
        				}
        			}
        		}
        	}
        }

        task blink13() running 1/s {
        	toggle(D13);
        }")
        actual (en/encode program)]
    (is (= expected actual))))
