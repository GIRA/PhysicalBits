(ns middleware.vm-test-files-gen
  (:require [clojure.test :refer :all]
            [middleware.compiler.compiler :as cc]
            [middleware.device.controller :as dc]
            [middleware.compiler.encoder :as en]
            [middleware.compiler.emitter :as emit]
            [clojure.string :as str])
  (:use [middleware.test-utils]))

; NOTE(Richo): These tests were autogenerated from Squeak code. They were originally
; used as a way to check that the clojure encoder works *exactly* the same as the
; Squeak encoder. However, now they produce the input programs for the VM tests and,
; in some cases, they compare the output from the compiler with the handwritten program.
; NOTE(Richo): They also provide programs for the CompileStats.csv file

(def output-path "../../firmware/Simulator/SimulatorTest/TestFiles/")

(defn write-file [program]
  (let [file-name (str output-path (test-name))
        bytes (dc/run {:compiled program})]
    (spit file-name (str/join ", " bytes))))

(defn compile-string [src]
  (register-program! src)
  (:compiled (cc/compile-uzi-string src)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; NOTE(Richo): Autogenerated code begins here...

(deftest Test001TurnOnBytecode
  (let [program (emit/program
                    :globals #{(emit/constant 0)}
                    :scripts [(emit/script
                                    :name "test"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/turn-on-pin 13)])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test002TurnOffBytecode
  (let [program (emit/program
                    :globals #{(emit/constant 0)}
                    :scripts [(emit/script
                                    :name "test"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/turn-off-pin 13)])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test003ReadWriteBytecode
  (let [program (emit/program
                    :globals #{(emit/constant 0)}
                    :scripts [(emit/script
                                    :name "test"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-pin 15)
                                                    (emit/write-pin 13)])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test004PushBytecode
  (let [program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 1)}
                    :scripts [(emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 1)
                                                    (emit/write-pin 13)])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test005PushWithFloatingPointVariable
  (let [program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 0.2)}
                    :scripts [(emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 0.2)
                                                    (emit/write-pin 13)])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test006PopBytecode
  (let [program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/variable "a" 0)
                                (emit/constant 1)}
                    :scripts [(emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-global "a")
                                                    (emit/write-pin 13)
                                                    (emit/push-value 1)
                                                    (emit/write-global "a")])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test007PrimBytecode
  (let [program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)}
                    :scripts [(emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test008JZBytecode
  (let [program (emit/program
                    :globals #{(emit/constant 0)}
                    :scripts [(emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-pin 13)
                                                    (emit/jz 2)
                                                    (emit/turn-off-pin 13)
                                                    (emit/jmp 1)
                                                    (emit/turn-on-pin 13)])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test009TickingRate
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 13)}
                    :scripts [(emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test010MultipleScriptsWithDifferentTickingRates
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 13)
                                (emit/constant 100)}
                    :scripts [(emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "pot"
                                    :running? true
                                    :delay 100
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-pin 15)
                                                    (emit/write-pin 9)])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test011YieldInstruction
  (let [program (emit/program
                    :globals #{(emit/constant 0)}
                    :scripts [(emit/script
                                    :name "yieldTest"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/turn-on-pin 13)
                                                    (emit/prim-call "yield")
                                                    (emit/turn-off-pin 13)])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test012YieldInstructionPreservesStack
  (let [program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)
                                (emit/constant 12)
                                (emit/constant 1)}
                    :scripts [(emit/script
                                    :name "yieldTest"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "yield")
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 12)
                                                    (emit/push-value 1)
                                                    (emit/prim-call "yield")
                                                    (emit/prim-call "add")
                                                    (emit/prim-call "toggle")])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test013YieldInstructionResumesOnNextTick
  (let [program (emit/program
                    :globals #{(emit/constant 1000)}
                    :scripts [(emit/script
                                    :name "yieldTest"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/turn-on-pin 12)
                                                    (emit/prim-call "yield")
                                                    (emit/turn-off-pin 12)])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test014PrimitiveYieldTime
  (let [program (emit/program
                    :globals #{(emit/constant 100)
                                (emit/constant 1000)}
                    :scripts [(emit/script
                                    :name "yieldTest"
                                    :running? true
                                    :delay 100
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/turn-on-pin 13)
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "delayMs")
                                                    (emit/turn-off-pin 13)])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test015YieldAfterBackwardsJump
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 11)
                                (emit/constant 0)
                                (emit/constant 13)}
                    :scripts [(emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 11)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "main"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/read-pin 15)
                                                    (emit/jz -2)
                                                    (emit/read-pin 15)
                                                    (emit/jnz -2)])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test016ScriptCallWithoutParametersOrReturnValue
  (let [program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 10)
                                (emit/constant 1000)
                                (emit/constant 11)}
                    :scripts [(emit/script
                                    :name "toggle"
                                    :running? false
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 10)
                                                    (emit/prim-call "toggle")
                                                    (emit/prim-call "ret")
                                                    (emit/turn-on-pin 13)])
                                (emit/script
                                    :name "loop"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/script-call "toggle")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 11)
                                                    (emit/prim-call "toggle")])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test017ScriptCallWithoutParametersWithReturnValueAndExplicitReturn
  (let [program (emit/program
                    :globals #{(emit/variable "counter" 5)
                                (emit/constant 0)
                                (emit/constant 1)
                                (emit/constant 13)
                                (emit/constant 100)}
                    :scripts [(emit/script
                                    :name "incr"
                                    :running? false
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-global "counter")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "add")
                                                    (emit/write-global "counter")
                                                    (emit/read-global "counter")
                                                    (emit/prim-call "retv")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "loop"
                                    :running? true
                                    :delay 100
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/script-call "incr")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "divide")
                                                    (emit/write-pin 11)])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test018ScriptTickingWithExplicitReturn
  (let [program (emit/program
                    :globals #{(emit/constant 1)
                                (emit/constant 13)
                                (emit/variable "counter" 0)
                                (emit/constant 11)}
                    :scripts [(emit/script
                                    :name "incr"
                                    :running? true
                                    :delay 1
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/read-global "counter")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "add")
                                                    (emit/write-global "counter")
                                                    (emit/read-global "counter")
                                                    (emit/prim-call "retv")
                                                    (emit/push-value 11)
                                                    (emit/prim-call "toggle")])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test019ScriptWithYieldBeforeEndOfScript
  (let [program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 11)
                                (emit/constant 100)}
                    :scripts [(emit/script
                                    :name "blink11"
                                    :running? false
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 11)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "main"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/script-call "blink11")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test020ScriptCallWithOneParameterAndReturnValue
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 0)
                                (emit/constant 1)
                                (emit/constant 11)
                                (emit/constant 10000000)}
                    :scripts [(emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/script-call "main")
                                                    (emit/prim-call "pop")])
                                (emit/script
                                    :name "toggle"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "n" 0)]
                                    :locals []
                                    :instructions [(emit/push-value 1)
                                                    (emit/read-local "n")
                                                    (emit/prim-call "subtract")
                                                    (emit/prim-call "retv")
                                                    (emit/push-value 11)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "main"
                                    :running? false
                                    :delay 10000000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-pin 13)
                                                    (emit/script-call "toggle")
                                                    (emit/write-pin 13)])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test021ScriptCallWithOneParameterWithoutReturnValue
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 0)
                                (emit/constant 1)
                                (emit/constant 10000000)}
                    :scripts [(emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/script-call "main")
                                                    (emit/prim-call "pop")])
                                (emit/script
                                    :name "toggle"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "n" 0)]
                                    :locals []
                                    :instructions [(emit/push-value 1)
                                                    (emit/read-local "n")
                                                    (emit/prim-call "subtract")
                                                    (emit/write-pin 13)])
                                (emit/script
                                    :name "main"
                                    :running? false
                                    :delay 10000000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-pin 13)
                                                    (emit/script-call "toggle")
                                                    (emit/prim-call "pop")])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test022ScriptCallWithOneParameterWithoutReturnValueWithExplicitReturn
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 0)
                                (emit/constant 1)
                                (emit/constant 10000000)}
                    :scripts [(emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/script-call "main")
                                                    (emit/prim-call "pop")])
                                (emit/script
                                    :name "toggle"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "n" 0)]
                                    :locals []
                                    :instructions [(emit/push-value 1)
                                                    (emit/read-local "n")
                                                    (emit/prim-call "subtract")
                                                    (emit/write-pin 13)
                                                    (emit/prim-call "ret")
                                                    (emit/turn-on-pin 11)])
                                (emit/script
                                    :name "main"
                                    :running? false
                                    :delay 10000000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-pin 13)
                                                    (emit/script-call "toggle")
                                                    (emit/write-pin 11)])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test023ScriptCallWithTwoParametersWithoutReturnValueWithExplicitReturn
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 0)
                                (emit/constant 10000000)
                                (emit/constant 1)}
                    :scripts [(emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/script-call "main")
                                                    (emit/prim-call "pop")])
                                (emit/script
                                    :name "toggle"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "a" 0)
                                                (emit/variable "b" 0)]
                                    :locals []
                                    :instructions [(emit/read-local "a")
                                                    (emit/read-local "b")
                                                    (emit/prim-call "subtract")
                                                    (emit/write-pin 13)
                                                    (emit/prim-call "ret")
                                                    (emit/turn-on-pin 11)])
                                (emit/script
                                    :name "main"
                                    :running? false
                                    :delay 10000000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 1)
                                                    (emit/read-pin 13)
                                                    (emit/script-call "toggle")
                                                    (emit/write-pin 11)])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test024ScriptCallWithTwoParametersWithReturnValue
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 0)
                                (emit/constant 11)
                                (emit/constant 10000000)
                                (emit/constant 1)}
                    :scripts [(emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/script-call "main")
                                                    (emit/prim-call "pop")])
                                (emit/script
                                    :name "toggle"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "a" 0)
                                                (emit/variable "b" 0)]
                                    :locals []
                                    :instructions [(emit/read-local "a")
                                                    (emit/read-local "a")
                                                    (emit/read-local "b")
                                                    (emit/prim-call "subtract")
                                                    (emit/prim-call "multiply")
                                                    (emit/prim-call "retv")
                                                    (emit/push-value 11)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "main"
                                    :running? false
                                    :delay 10000000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 1)
                                                    (emit/read-pin 13)
                                                    (emit/script-call "toggle")
                                                    (emit/write-pin 13)])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test025ScriptCallWithRecursiveCall4LevelsDeep
  (let [program (emit/program
                    :globals #{(emit/variable "c" 0)
                                (emit/constant 0)
                                (emit/constant 42)
                                (emit/constant 1)
                                (emit/constant 1000)
                                (emit/constant 4)}
                    :scripts [(emit/script
                                    :name "foo"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "n" 0)]
                                    :locals []
                                    :instructions [(emit/read-local "n")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 3)
                                                    (emit/push-value 42)
                                                    (emit/prim-call "retv")
                                                    (emit/jmp 5)
                                                    (emit/read-local "n")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "subtract")
                                                    (emit/script-call "foo")
                                                    (emit/prim-call "retv")])
                                (emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 4)
                                                    (emit/script-call "foo")
                                                    (emit/write-global "c")
                                                    (emit/read-global "c")
                                                    (emit/write-pin 13)])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test026ScriptTickingThatAlsoCallsItself
  (let [program (emit/program
                    :globals #{(emit/variable "result" 0)
                                (emit/variable "counter" 0)
                                (emit/constant 1000)
                                (emit/constant 1)
                                (emit/constant 2)
                                (emit/constant 13)
                                (emit/constant 0)
                                (emit/constant 9)
                                (emit/constant 256)
                                (emit/constant 11)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments [(emit/variable "call" 0)]
                                    :locals []
                                    :instructions [(emit/read-local "call")
                                                    (emit/jz 15)
                                                    (emit/read-local "call")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 3)
                                                    (emit/push-value 2)
                                                    (emit/prim-call "retv")
                                                    (emit/jmp 7)
                                                    (emit/push-value 2)
                                                    (emit/read-local "call")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "subtract")
                                                    (emit/script-call "main")
                                                    (emit/prim-call "multiply")
                                                    (emit/prim-call "retv")
                                                    (emit/jmp 2)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "button"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 9)
                                                    (emit/prim-call "read")
                                                    (emit/jz -3)
                                                    (emit/push-value 9)
                                                    (emit/prim-call "read")
                                                    (emit/jnz -3)
                                                    (emit/read-global "counter")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "add")
                                                    (emit/write-global "counter")
                                                    (emit/read-global "counter")
                                                    (emit/script-call "main")
                                                    (emit/push-value 256)
                                                    (emit/prim-call "divide")
                                                    (emit/write-global "result")
                                                    (emit/push-value 11)
                                                    (emit/read-global "result")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test027PrimitiveCoroutineShouldReturnTheIndexOfTheActiveScript
  (let [program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 1000)
                                (emit/constant 11)}
                    :scripts [(emit/script
                                    :name "foo"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/script-call "writeCoroutine")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "delayMs")
                                                    (emit/start "bar")
                                                    (emit/stop "foo")])
                                (emit/script
                                    :name "bar"
                                    :running? false
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/script-call "writeCoroutine")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "delayMs")
                                                    (emit/start "foo")
                                                    (emit/stop "bar")])
                                (emit/script
                                    :name "writeCoroutine"
                                    :running? false
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 11)
                                                    (emit/prim-call "coroutine")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test028PrimitiveBitwiseAnd
  (let [program (emit/program
                    :globals #{(emit/variable "n" 0)
                                (emit/constant 1000)
                                (emit/constant 11)
                                (emit/constant 7)
                                (emit/constant 10)
                                (emit/constant 1)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 11)
                                                    (emit/read-global "n")
                                                    (emit/push-value 7)
                                                    (emit/prim-call "bitwiseAnd")
                                                    (emit/push-value 10)
                                                    (emit/prim-call "divide")
                                                    (emit/prim-call "write")
                                                    (emit/read-global "n")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "add")
                                                    (emit/write-global "n")])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test029PrimitiveBitwiseOr
  (let [program (emit/program
                    :globals #{(emit/variable "n" 0)
                                (emit/constant 1000)
                                (emit/constant 11)
                                (emit/constant 1)
                                (emit/constant 100)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 11)
                                                    (emit/read-global "n")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "bitwiseOr")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "divide")
                                                    (emit/prim-call "write")
                                                    (emit/read-global "n")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "add")
                                                    (emit/write-global "n")])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test030PrimitiveLogicalAnd
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 1)
                                (emit/constant 0)
                                (emit/constant 13)
                                (emit/constant 11)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 1)
                                                    (emit/push-value 0)
                                                    (emit/prim-call "logicalAnd")
                                                    (emit/jz 3)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/jmp 2)
                                                    (emit/push-value 11)
                                                    (emit/prim-call "toggle")])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test031PrimitiveLogicalOr
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 1)
                                (emit/constant 0)
                                (emit/constant 13)
                                (emit/constant 11)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 1)
                                                    (emit/push-value 0)
                                                    (emit/prim-call "logicalOr")
                                                    (emit/jz 3)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/jmp 2)
                                                    (emit/push-value 11)
                                                    (emit/prim-call "toggle")])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test032StopScriptAndRestartShouldResetPCAndStuff
  (let [program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)
                                (emit/constant 1000)
                                (emit/constant 11)
                                (emit/constant 500)}
                    :scripts [(emit/script
                                    :name "blink13"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 11)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "sleepAwake"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/stop "blink13")
                                                    (emit/push-value 500)
                                                    (emit/prim-call "delayMs")
                                                    (emit/start "blink13")
                                                    (emit/push-value 500)
                                                    (emit/prim-call "delayMs")])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test033StopCurrentScriptShouldStopImmediatelyAndPCShouldReturnToTheStart
  (let [program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)
                                (emit/constant 11)
                                (emit/constant 1000)}
                    :scripts [(emit/script
                                    :name "blink13"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/stop "blink13")
                                                    (emit/push-value 11)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "awake"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/start "blink13")])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test034StartOnTheCurrentTaskShouldJumpToTheBeginning
  (let [program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/start "main")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test035StartOnAnotherTaskShouldResetToBeginning
  (let [program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)
                                (emit/constant 100)
                                (emit/constant 1000)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "delayMs")])
                                (emit/script
                                    :name "awake"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/start "main")])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test036ResumeOnARunningTaskShouldHaveNoEffect
  (let [program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)
                                (emit/constant 100)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/resume "main")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/resume "main")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")])
                                (emit/script
                                    :name "awake"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/resume "main")])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test037ResumeOnAPausedTaskShouldContinueFromItsCurrentPC
  (let [program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)
                                (emit/constant 1000)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/pause "main")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/pause "main")])
                                (emit/script
                                    :name "awake"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/resume "main")])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test038ResumeOnStoppedTaskShouldJumpToBeginning
  (let [program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/stop "main")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/stop "main")])
                                (emit/script
                                    :name "awake"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/resume "main")])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test039StartOnStoppedTaskShouldJumpToBeginning
  (let [program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/stop "main")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/stop "main")])
                                (emit/script
                                    :name "awake"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/start "main")])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test040StartOnPausedTaskShouldJumpToBeginning
  (let [program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/pause "main")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/pause "main")])
                                (emit/script
                                    :name "awake"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/start "main")])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test041PausingShouldPreserveTheStack
  (let [program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 5)
                                (emit/constant 3)
                                (emit/constant 1000)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals [(emit/variable "a" 5)]
                                    :instructions [(emit/read-local "a")
                                                    (emit/push-value 5)
                                                    (emit/prim-call "add")
                                                    (emit/script-call "getPin")
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "getPin"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "n" 0)]
                                    :locals [(emit/variable "result" 0)]
                                    :instructions [(emit/read-local "n")
                                                    (emit/push-value 3)
                                                    (emit/prim-call "add")
                                                    (emit/write-local "result")
                                                    (emit/pause "main")
                                                    (emit/read-local "result")
                                                    (emit/prim-call "retv")])
                                (emit/script
                                    :name "awake"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/resume "main")])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test042EmptyScriptShouldNotCrashTheVM
  (let [program (emit/program
                    :globals #{(emit/constant 0)}
                    :scripts [(emit/script
                                    :name "empty"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test043ForLoop
  (let [program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 7)
                                (emit/constant 11)
                                (emit/constant 1)}
                    :scripts [(emit/script
                                    :name "for"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals [(emit/variable "i#1" 0)]
                                    :instructions [(emit/push-value 7)
                                                    (emit/write-local "i#1")
                                                    (emit/read-local "i#1")
                                                    (emit/push-value 11)
                                                    (emit/prim-call "lessThanOrEquals")
                                                    (emit/jz 9)
                                                    (emit/read-local "i#1")
                                                    (emit/prim-call "turnOn")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayS")
                                                    (emit/read-local "i#1")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "add")
                                                    (emit/write-local "i#1")
                                                    (emit/jmp -13)])])
        actual (en/encode program)
        expected (en/encode (compile-string "task for() running { for i = 7 to 11 { turnOn(i); delayS(1); }}"))]
    (is (= actual expected))
    (write-file program)))

(deftest Test044ReversedForLoop
  (let [program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 11)
                                (emit/constant 7)
                                (emit/constant -1)
                                (emit/constant 1)}
                    :scripts [(emit/script
                                    :name "for"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals [(emit/variable "i#1" 0)]
                                    :instructions [(emit/push-value 11)
                                                    (emit/write-local "i#1")
                                                    (emit/read-local "i#1")
                                                    (emit/push-value 7)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz 9)
                                                    (emit/read-local "i#1")
                                                    (emit/prim-call "turnOn")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayS")
                                                    (emit/read-local "i#1")
                                                    (emit/push-value -1)
                                                    (emit/prim-call "add")
                                                    (emit/write-local "i#1")
                                                    (emit/jmp -13)])])
        actual (en/encode program)
        expected (en/encode (compile-string "task for() running { for i = 11 to 7 by -1 { turnOn(i); delayS(1); }}"))]
    (is (= actual expected))
    (write-file program)))

(deftest Test045ForLoopWithoutConstantStep
  (let [program (emit/program
                    :globals #{(emit/variable "step" 1)
                                (emit/constant 0)
                                (emit/constant 7)
                                (emit/constant 11)
                                (emit/constant 1)}
                    :scripts [(emit/script
                                    :name "for"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals [(emit/variable "i#1" 0)
                                             (emit/variable "@1" 0)]
                                    :instructions [(emit/push-value 7)
                                                    (emit/write-local "i#1")
                                                    (emit/read-local "i#1")
                                                    (emit/push-value 11)
                                                    (emit/read-global "step")
                                                    (emit/write-local "@1")
                                                    (emit/read-local "@1")
                                                    (emit/push-value 0)
                                                    (emit/jlte 2)
                                                    (emit/prim-call "lessThanOrEquals")
                                                    (emit/jmp 1)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz 9)
                                                    (emit/read-local "i#1")
                                                    (emit/prim-call "turnOn")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayS")
                                                    (emit/read-local "i#1")
                                                    (emit/read-local "@1")
                                                    (emit/prim-call "add")
                                                    (emit/write-local "i#1")
                                                    (emit/jmp -20)])])
        actual (en/encode program)
        expected (en/encode (compile-string "
              	var step = 1;

              	task for() running {
              		for i = 7 to 11 by step {
              			turnOn(i);
                    delayS(1);
              		}
              	}"))]
    (is (= actual expected))
    (write-file program)))

(deftest Test046ReverseForLoopWithoutConstantStep
  (let [program (emit/program
                    :globals #{(emit/variable "step" -1)
                                (emit/constant 0)
                                (emit/constant 11)
                                (emit/constant 7)
                                (emit/constant 1)}
                    :scripts [(emit/script
                                    :name "for"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals [(emit/variable "i#1" 0)
                                             (emit/variable "@1" 0)]
                                    :instructions [(emit/push-value 11)
                                                    (emit/write-local "i#1")
                                                    (emit/read-local "i#1")
                                                    (emit/push-value 7)
                                                    (emit/read-global "step")
                                                    (emit/write-local "@1")
                                                    (emit/read-local "@1")
                                                    (emit/push-value 0)
                                                    (emit/jlte 2)
                                                    (emit/prim-call "lessThanOrEquals")
                                                    (emit/jmp 1)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz 9)
                                                    (emit/read-local "i#1")
                                                    (emit/prim-call "turnOn")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayS")
                                                    (emit/read-local "i#1")
                                                    (emit/read-local "@1")
                                                    (emit/prim-call "add")
                                                    (emit/write-local "i#1")
                                                    (emit/jmp -20)])])
        actual (en/encode program)
        expected (en/encode (compile-string "
              	var step = -1;

              	task for() running {
              		for i = 11 to 7 by step {
              			turnOn(i);
                    delayS(1);
              		}
              	}"))]
    (is (= actual expected))
    (write-file program)))

(deftest Test047ForLoopShouldOnlyEvaluateStepOncePerIteration
  (let [program (emit/program
                    :globals #{(emit/variable "step" -1)
                                (emit/variable "stop" -10)
                                (emit/constant 0)
                                (emit/constant -1)
                                (emit/constant 13)
                                (emit/constant 1)}
                    :scripts [(emit/script
                                    :name "negatedStep"
                                    :running? false
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-global "step")
                                                    (emit/push-value -1)
                                                    (emit/prim-call "multiply")
                                                    (emit/write-global "step")
                                                    (emit/read-global "step")
                                                    (emit/prim-call "retv")])
                                (emit/script
                                    :name "negatedStop"
                                    :running? false
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-global "stop")
                                                    (emit/push-value -1)
                                                    (emit/prim-call "multiply")
                                                    (emit/write-global "stop")
                                                    (emit/read-global "stop")
                                                    (emit/prim-call "retv")])
                                (emit/script
                                    :name "for"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals [(emit/variable "i#1" 0)
                                             (emit/variable "@1" 0)]
                                    :instructions [(emit/push-value 0)
                                                    (emit/write-local "i#1")
                                                    (emit/read-local "i#1")
                                                    (emit/script-call "negatedStop")
                                                    (emit/script-call "negatedStep")
                                                    (emit/write-local "@1")
                                                    (emit/read-local "@1")
                                                    (emit/push-value 0)
                                                    (emit/jlte 2)
                                                    (emit/prim-call "lessThanOrEquals")
                                                    (emit/jmp 1)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz 10)
                                                    (emit/push-value 13)
                                                    (emit/read-local "i#1")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/read-local "i#1")
                                                    (emit/read-local "@1")
                                                    (emit/prim-call "add")
                                                    (emit/write-local "i#1")
                                                    (emit/jmp -21)])])
        actual (en/encode program)
        expected (en/encode (compile-string "
              	var step = -1;
              	var stop = -10;

              	func negatedStep() {
              		step = step * -1;
              		return step;
              	}

              	func negatedStop() {
              		stop = stop * -1;
              		return stop;
              	}

              	task for() running {
              		for i = 0 to negatedStop() by negatedStep() {
              			write(D13, i);
                    delayMs(1);
              		}
              	}"))]
    (is (= actual expected))
    (write-file program)))

(deftest Test048MutexShouldGuaranteeACriticalSection
  (let [program (emit/program
                    :globals #{(emit/variable "m.lock" 0)
                                (emit/variable "m.owner" -1)
                                (emit/constant 0)
                                (emit/constant 1)
                                (emit/constant -1)
                                (emit/constant 1000)
                                (emit/constant 13)
                                (emit/constant 11)
                                (emit/constant 0.25)
                                (emit/constant 2000)
                                (emit/constant -0.5)}
                    :scripts [(emit/script
                                    :name "m.acquire"
                                    :running? false
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-global "m.lock")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "equals")
                                                    (emit/read-global "m.owner")
                                                    (emit/prim-call "coroutine")
                                                    (emit/prim-call "equals")
                                                    (emit/prim-call "logicalOr")
                                                    (emit/jz -8)
                                                    (emit/push-value 1)
                                                    (emit/write-global "m.lock")
                                                    (emit/prim-call "coroutine")
                                                    (emit/write-global "m.owner")])
                                (emit/script
                                    :name "m.release"
                                    :running? false
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 0)
                                                    (emit/write-global "m.lock")
                                                    (emit/push-value -1)
                                                    (emit/write-global "m.owner")])
                                (emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "test1"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals [(emit/variable "a#1" 0)]
                                    :instructions [(emit/script-call "m.acquire")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 0)
                                                    (emit/write-local "a#1")
                                                    (emit/read-local "a#1")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "lessThanOrEquals")
                                                    (emit/jz 10)
                                                    (emit/push-value 11)
                                                    (emit/read-local "a#1")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "delayMs")
                                                    (emit/read-local "a#1")
                                                    (emit/push-value 0.25)
                                                    (emit/prim-call "add")
                                                    (emit/write-local "a#1")
                                                    (emit/jmp -14)
                                                    (emit/script-call "m.release")
                                                    (emit/prim-call "pop")])
                                (emit/script
                                    :name "test2"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals [(emit/variable "a#2" 0)]
                                    :instructions [(emit/script-call "m.acquire")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 1)
                                                    (emit/write-local "a#2")
                                                    (emit/read-local "a#2")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz 10)
                                                    (emit/push-value 11)
                                                    (emit/read-local "a#2")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 2000)
                                                    (emit/prim-call "delayMs")
                                                    (emit/read-local "a#2")
                                                    (emit/push-value -0.5)
                                                    (emit/prim-call "add")
                                                    (emit/write-local "a#2")
                                                    (emit/jmp -14)
                                                    (emit/script-call "m.release")
                                                    (emit/prim-call "pop")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
              	import m from 'Mutex.uzi';

              	task blink() running 1/s { toggle(D13); }

              	task test1() running {
              		m.acquire();
              		for a = 0 to 1 by 0.25 {
              			write(D11, a);
              			delayMs(1000);
              		}
              		m.release();
              	}

              	task test2() running {
              		m.acquire();
              		for a = 1 to 0 by -0.5 {
              			write(D11, a);
              			delayMs(2000);
              		}
              		m.release();
              	}"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test049ChannelShouldDeadlockIfConsumingFromTheSameTaskAsProducer
  (let [program (emit/program
                    :globals #{(emit/variable "c.value" 0)
                                (emit/variable "c.state" 0)
                                (emit/variable "c.r_turn" -1)
                                (emit/variable "c.s_turn" -1)
                                (emit/constant 0)
                                (emit/constant -1)
                                (emit/constant 1)
                                (emit/constant 1000)
                                (emit/constant 13)
                                (emit/constant 11)}
                    :scripts [(emit/script
                                    :name "c.send"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "val#1" 0)]
                                    :locals []
                                    :instructions [(emit/prim-call "coroutine")
                                                    (emit/read-global "c.s_turn")
                                                    (emit/prim-call "notEquals")
                                                    (emit/jz 8)
                                                    (emit/read-global "c.s_turn")
                                                    (emit/push-value -1)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 3)
                                                    (emit/prim-call "coroutine")
                                                    (emit/write-global "c.s_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/jmp -12)
                                                    (emit/read-global "c.state")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "notEquals")
                                                    (emit/jnz -4)
                                                    (emit/push-value -1)
                                                    (emit/write-global "c.s_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/read-local "val#1")
                                                    (emit/write-global "c.value")
                                                    (emit/push-value 1)
                                                    (emit/write-global "c.state")
                                                    (emit/read-global "c.state")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "notEquals")
                                                    (emit/jnz -4)])
                                (emit/script
                                    :name "c.receive"
                                    :running? false
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/prim-call "coroutine")
                                                    (emit/read-global "c.r_turn")
                                                    (emit/prim-call "notEquals")
                                                    (emit/jz 8)
                                                    (emit/read-global "c.r_turn")
                                                    (emit/push-value -1)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 3)
                                                    (emit/prim-call "coroutine")
                                                    (emit/write-global "c.r_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/jmp -12)
                                                    (emit/read-global "c.state")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "notEquals")
                                                    (emit/jnz -4)
                                                    (emit/push-value -1)
                                                    (emit/write-global "c.r_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/push-value 0)
                                                    (emit/write-global "c.state")
                                                    (emit/read-global "c.value")
                                                    (emit/prim-call "retv")])
                                (emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "cp"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 11)
                                                    (emit/prim-call "turnOn")
                                                    (emit/script-call "c.receive")
                                                    (emit/script-call "c.send")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 11)
                                                    (emit/prim-call "toggle")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
              	import c from 'Channel.uzi';

              	task blink() running 1/s { toggle(D13); }

              	task cp() running {
              		turnOn(D11);
              		c.send(c.receive());
              		toggle(D11);
              	}"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test050ChannelWithMultipleProducersAndNoConsumerShouldBlockAllProducers
  (let [program (emit/program
                    :globals #{(emit/variable "c.value" 0)
                                (emit/variable "c.state" 0)
                                (emit/variable "c.s_turn" -1)
                                (emit/variable "counter" 0.5)
                                (emit/constant 0)
                                (emit/constant -1)
                                (emit/constant 1)
                                (emit/constant 2)
                                (emit/constant 0.5)
                                (emit/constant 3)
                                (emit/constant 1000)
                                (emit/constant 13)
                                (emit/constant 11)}
                    :scripts [(emit/script
                                    :name "c.send"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "val#1" 0)]
                                    :locals []
                                    :instructions [(emit/prim-call "coroutine")
                                                    (emit/read-global "c.s_turn")
                                                    (emit/prim-call "notEquals")
                                                    (emit/jz 8)
                                                    (emit/read-global "c.s_turn")
                                                    (emit/push-value -1)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 3)
                                                    (emit/prim-call "coroutine")
                                                    (emit/write-global "c.s_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/jmp -12)
                                                    (emit/read-global "c.state")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "notEquals")
                                                    (emit/jnz -4)
                                                    (emit/push-value -1)
                                                    (emit/write-global "c.s_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/read-local "val#1")
                                                    (emit/write-global "c.value")
                                                    (emit/push-value 1)
                                                    (emit/write-global "c.state")
                                                    (emit/read-global "c.state")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "notEquals")
                                                    (emit/jnz -4)])
                                (emit/script
                                    :name "producer1"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 1)
                                                    (emit/script-call "c.send")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 1)
                                                    (emit/write-global "counter")])
                                (emit/script
                                    :name "producer0"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 0)
                                                    (emit/script-call "c.send")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 2)
                                                    (emit/write-global "counter")])
                                (emit/script
                                    :name "producer05"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 0.5)
                                                    (emit/script-call "c.send")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 3)
                                                    (emit/write-global "counter")])
                                (emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "test"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 11)
                                                    (emit/read-global "counter")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
              	import c from 'Channel.uzi';
              	var counter = 0.5;

              	task producer1() running {
              		c.send(1);
              		counter = 1;
              	}

              	task producer0() running {
              		c.send(0);
              		counter = 2;
              	}

              	task producer05() running {
              		c.send(0.5);
              		counter = 3;
              	}

              	task blink() running 1/s { toggle(D13); }

              	task test() running { write(D11, counter); }"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test051ChannelWithOneProducerAndOneConsumerBlocksTheProducerAtTheRateOfConsumer
  (let [program (emit/program
                    :globals #{(emit/variable "c.value" 0)
                                (emit/variable "c.state" 0)
                                (emit/variable "c.r_turn" -1)
                                (emit/variable "c.s_turn" -1)
                                (emit/constant 0)
                                (emit/constant -1)
                                (emit/constant 1)
                                (emit/constant 11)
                                (emit/constant 1000)
                                (emit/constant 13)}
                    :scripts [(emit/script
                                    :name "c.send"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "val#1" 0)]
                                    :locals []
                                    :instructions [(emit/prim-call "coroutine")
                                                    (emit/read-global "c.s_turn")
                                                    (emit/prim-call "notEquals")
                                                    (emit/jz 8)
                                                    (emit/read-global "c.s_turn")
                                                    (emit/push-value -1)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 3)
                                                    (emit/prim-call "coroutine")
                                                    (emit/write-global "c.s_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/jmp -12)
                                                    (emit/read-global "c.state")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "notEquals")
                                                    (emit/jnz -4)
                                                    (emit/push-value -1)
                                                    (emit/write-global "c.s_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/read-local "val#1")
                                                    (emit/write-global "c.value")
                                                    (emit/push-value 1)
                                                    (emit/write-global "c.state")
                                                    (emit/read-global "c.state")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "notEquals")
                                                    (emit/jnz -4)])
                                (emit/script
                                    :name "c.receive"
                                    :running? false
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/prim-call "coroutine")
                                                    (emit/read-global "c.r_turn")
                                                    (emit/prim-call "notEquals")
                                                    (emit/jz 8)
                                                    (emit/read-global "c.r_turn")
                                                    (emit/push-value -1)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 3)
                                                    (emit/prim-call "coroutine")
                                                    (emit/write-global "c.r_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/jmp -12)
                                                    (emit/read-global "c.state")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "notEquals")
                                                    (emit/jnz -4)
                                                    (emit/push-value -1)
                                                    (emit/write-global "c.r_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/push-value 0)
                                                    (emit/write-global "c.state")
                                                    (emit/read-global "c.value")
                                                    (emit/prim-call "retv")])
                                (emit/script
                                    :name "producer"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals [(emit/variable "a#2" 1)]
                                    :instructions [(emit/read-local "a#2")
                                                    (emit/script-call "c.send")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 1)
                                                    (emit/read-local "a#2")
                                                    (emit/prim-call "subtract")
                                                    (emit/write-local "a#2")
                                                    (emit/push-value 11)
                                                    (emit/read-local "a#2")
                                                    (emit/prim-call "write")
                                                    (emit/jmp -11)])
                                (emit/script
                                    :name "consumer"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/script-call "c.receive")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
              	import c from 'Channel.uzi';

              	task producer() running {
              		var a = 1;
              		forever {
              			c.send(a);
              			a = 1 - a;
              			write(D11, a);
              		}
              	}

              	task consumer() running 1/s {
              		write(D13, c.receive());
              	}"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test052ChannelWithMultipleProducersAndOneConsumer
  (let [program (emit/program
                    :globals #{(emit/variable "c.value" 0)
                                (emit/variable "c.state" 0)
                                (emit/variable "c.r_turn" -1)
                                (emit/variable "c.s_turn" -1)
                                (emit/constant 0)
                                (emit/constant -1)
                                (emit/constant 1)
                                (emit/constant 1000)
                                (emit/constant 13)
                                (emit/constant 0.25)
                                (emit/constant 0.5)
                                (emit/constant 0.75)
                                (emit/constant 11)}
                    :scripts [(emit/script
                                    :name "c.send"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "val#1" 0)]
                                    :locals []
                                    :instructions [(emit/prim-call "coroutine")
                                                    (emit/read-global "c.s_turn")
                                                    (emit/prim-call "notEquals")
                                                    (emit/jz 8)
                                                    (emit/read-global "c.s_turn")
                                                    (emit/push-value -1)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 3)
                                                    (emit/prim-call "coroutine")
                                                    (emit/write-global "c.s_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/jmp -12)
                                                    (emit/read-global "c.state")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "notEquals")
                                                    (emit/jnz -4)
                                                    (emit/push-value -1)
                                                    (emit/write-global "c.s_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/read-local "val#1")
                                                    (emit/write-global "c.value")
                                                    (emit/push-value 1)
                                                    (emit/write-global "c.state")
                                                    (emit/read-global "c.state")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "notEquals")
                                                    (emit/jnz -4)])
                                (emit/script
                                    :name "c.receive"
                                    :running? false
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/prim-call "coroutine")
                                                    (emit/read-global "c.r_turn")
                                                    (emit/prim-call "notEquals")
                                                    (emit/jz 8)
                                                    (emit/read-global "c.r_turn")
                                                    (emit/push-value -1)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 3)
                                                    (emit/prim-call "coroutine")
                                                    (emit/write-global "c.r_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/jmp -12)
                                                    (emit/read-global "c.state")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "notEquals")
                                                    (emit/jnz -4)
                                                    (emit/push-value -1)
                                                    (emit/write-global "c.r_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/push-value 0)
                                                    (emit/write-global "c.state")
                                                    (emit/read-global "c.value")
                                                    (emit/prim-call "retv")])
                                (emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "producer1"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 0)
                                                    (emit/script-call "c.send")
                                                    (emit/prim-call "pop")])
                                (emit/script
                                    :name "producer2"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 0.25)
                                                    (emit/script-call "c.send")
                                                    (emit/prim-call "pop")])
                                (emit/script
                                    :name "producer3"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 0.5)
                                                    (emit/script-call "c.send")
                                                    (emit/prim-call "pop")])
                                (emit/script
                                    :name "producer4"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 0.75)
                                                    (emit/script-call "c.send")
                                                    (emit/prim-call "pop")])
                                (emit/script
                                    :name "producer5"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 1)
                                                    (emit/script-call "c.send")
                                                    (emit/prim-call "pop")])
                                (emit/script
                                    :name "consumer"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 11)
                                                    (emit/script-call "c.receive")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
              	import c from 'Channel.uzi';

              	task blink() running 1/s { toggle(D13); }

              	task producer1() running { c.send(0); }
              	task producer2() running { c.send(0.25); }
              	task producer3() running { c.send(0.5); }
              	task producer4() running { c.send(0.75); }
              	task producer5() running { c.send(1); }

              	task consumer() running 1/s { write(D11, c.receive()); }"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test053ChannelWithMultipleConsumersAndOneProducer
  (let [program (emit/program
                    :globals #{(emit/variable "c.value" 0)
                                (emit/variable "c.state" 0)
                                (emit/variable "c.r_turn" -1)
                                (emit/variable "c.s_turn" -1)
                                (emit/constant 0)
                                (emit/constant -1)
                                (emit/constant 1)
                                (emit/constant 13)
                                (emit/constant 10)
                                (emit/constant 11)
                                (emit/constant 12)
                                (emit/constant 1000)
                                (emit/constant 0.25)}
                    :scripts [(emit/script
                                    :name "c.send"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "val#1" 0)]
                                    :locals []
                                    :instructions [(emit/prim-call "coroutine")
                                                    (emit/read-global "c.s_turn")
                                                    (emit/prim-call "notEquals")
                                                    (emit/jz 8)
                                                    (emit/read-global "c.s_turn")
                                                    (emit/push-value -1)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 3)
                                                    (emit/prim-call "coroutine")
                                                    (emit/write-global "c.s_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/jmp -12)
                                                    (emit/read-global "c.state")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "notEquals")
                                                    (emit/jnz -4)
                                                    (emit/push-value -1)
                                                    (emit/write-global "c.s_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/read-local "val#1")
                                                    (emit/write-global "c.value")
                                                    (emit/push-value 1)
                                                    (emit/write-global "c.state")
                                                    (emit/read-global "c.state")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "notEquals")
                                                    (emit/jnz -4)])
                                (emit/script
                                    :name "c.receive"
                                    :running? false
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/prim-call "coroutine")
                                                    (emit/read-global "c.r_turn")
                                                    (emit/prim-call "notEquals")
                                                    (emit/jz 8)
                                                    (emit/read-global "c.r_turn")
                                                    (emit/push-value -1)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 3)
                                                    (emit/prim-call "coroutine")
                                                    (emit/write-global "c.r_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/jmp -12)
                                                    (emit/read-global "c.state")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "notEquals")
                                                    (emit/jnz -4)
                                                    (emit/push-value -1)
                                                    (emit/write-global "c.r_turn")
                                                    (emit/prim-call "yield")
                                                    (emit/push-value 0)
                                                    (emit/write-global "c.state")
                                                    (emit/read-global "c.value")
                                                    (emit/prim-call "retv")])
                                (emit/script
                                    :name "consumer1"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/script-call "c.receive")
                                                    (emit/prim-call "write")])
                                (emit/script
                                    :name "consumer2"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 10)
                                                    (emit/script-call "c.receive")
                                                    (emit/prim-call "write")])
                                (emit/script
                                    :name "consumer3"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 11)
                                                    (emit/script-call "c.receive")
                                                    (emit/prim-call "write")])
                                (emit/script
                                    :name "consumer4"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 12)
                                                    (emit/script-call "c.receive")
                                                    (emit/prim-call "write")])
                                (emit/script
                                    :name "consumer"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals [(emit/variable "a#2" 0)]
                                    :instructions [(emit/push-value 0)
                                                    (emit/write-local "a#2")
                                                    (emit/read-local "a#2")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "lessThanOrEquals")
                                                    (emit/jz 10)
                                                    (emit/read-local "a#2")
                                                    (emit/script-call "c.send")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "delayMs")
                                                    (emit/read-local "a#2")
                                                    (emit/push-value 0.25)
                                                    (emit/prim-call "add")
                                                    (emit/write-local "a#2")
                                                    (emit/jmp -14)])])
        actual (en/encode program)
        expected (en/encode (compile-string "
              	import c from 'Channel.uzi';

              	task consumer1() running { write(D13, c.receive()); }
              	task consumer2() running { write(D10, c.receive()); }
              	task consumer3() running { write(D11, c.receive()); }
              	task consumer4() running { write(D12, c.receive()); }


              	task consumer() running {
              		for a = 0 to 1 by 0.25 {
              			c.send(a);
              			delayMs(1000);
              		}
              	}"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test054VariablesWithTheSameNameInDifferentScopesShouldNotInterfereWithEachOther
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 1)
                                (emit/constant 7)
                                (emit/constant 0)
                                (emit/constant 6)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals [(emit/variable "pin#1" 7)
                                             (emit/variable "pin#2" 0)]
                                    :instructions [(emit/push-value 1)
                                                    (emit/jz 2)
                                                    (emit/read-local "pin#1")
                                                    (emit/prim-call "toggle")
                                                    (emit/read-local "pin#2")
                                                    (emit/push-value 6)
                                                    (emit/prim-call "add")
                                                    (emit/write-local "pin#2")
                                                    (emit/read-local "pin#2")
                                                    (emit/prim-call "toggle")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
              	\"Pin 7 should blink once per second.
              	Pin 6 should blink once per second.\"
              	task main() running 1/s {
              		if 1 {
              			var pin = 7;
              			toggle(pin);
              		}
              		var pin;
              		pin = pin + 6;
              		toggle(pin);
              	}"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test055VariablesWithTheSameNameInDifferentScopesShouldNotInterfereWithEachOther
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 1)
                                (emit/constant 7)
                                (emit/constant 6)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals [(emit/variable "pin#1" 7)
                                             (emit/variable "pin#2" 6)]
                                    :instructions [(emit/push-value 1)
                                                    (emit/jz 2)
                                                    (emit/read-local "pin#1")
                                                    (emit/prim-call "toggle")
                                                    (emit/read-local "pin#2")
                                                    (emit/prim-call "toggle")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
              	\"Pin 7 should blink once per second.
              	Pin 6 should blink once per second.\"
              	task main() running 1/s {
              		if 1 {
              			var pin = 7;
              			toggle(pin);
              		}
              		var pin = 6;
              		toggle(pin);
              	}"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test056Round
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 10)
                                (emit/constant 0.25)
                                (emit/constant 11)
                                (emit/constant 0.5)
                                (emit/constant 12)
                                (emit/constant 0.75)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 10)
                                                    (emit/push-value 0.25)
                                                    (emit/prim-call "round")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 11)
                                                    (emit/push-value 0.5)
                                                    (emit/prim-call "round")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 12)
                                                    (emit/push-value 0.75)
                                                    (emit/prim-call "round")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
              	task main() running 1/s {
              		write(D10, round(0.25));
              		write(D11, round(0.5));
              		write(D12, round(0.75));
              	}"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test057Ceil
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 10)
                                (emit/constant 0.25)
                                (emit/constant 11)
                                (emit/constant 0.5)
                                (emit/constant 12)
                                (emit/constant 0.75)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 10)
                                                    (emit/push-value 0.25)
                                                    (emit/prim-call "ceil")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 11)
                                                    (emit/push-value 0.5)
                                                    (emit/prim-call "ceil")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 12)
                                                    (emit/push-value 0.75)
                                                    (emit/prim-call "ceil")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
              	task main() running 1/s {
              		write(D10, ceil(0.25));
              		write(D11, ceil(0.5));
              		write(D12, ceil(0.75));
              	}"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test058Floor
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 10)
                                (emit/constant 0.25)
                                (emit/constant 11)
                                (emit/constant 0.5)
                                (emit/constant 12)
                                (emit/constant 0.75)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 10)
                                                    (emit/push-value 0.25)
                                                    (emit/prim-call "floor")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 11)
                                                    (emit/push-value 0.5)
                                                    (emit/prim-call "floor")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 12)
                                                    (emit/push-value 0.75)
                                                    (emit/prim-call "floor")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
              	task main() running 1/s {
              		write(D10, floor(0.25));
              		write(D11, floor(0.5));
              		write(D12, floor(0.75));
              	}"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test059Sqrt
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 9)
                                (emit/constant 0.25)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 9)
                                                    (emit/push-value 0.25)
                                                    (emit/prim-call "sqrt")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
              	task main() running 1/s {
              		write(D9, sqrt(0.25));
              	}"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test060Abs
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 13)
                                (emit/constant -1)
                                (emit/constant 9)
                                (emit/constant -0.5)
                                (emit/constant 10)
                                (emit/constant 0.5)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/push-value -1)
                                                    (emit/prim-call "abs")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value -0.5)
                                                    (emit/prim-call "abs")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 10)
                                                    (emit/push-value 0.5)
                                                    (emit/prim-call "abs")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
              	task main() running 1/s {
              		write(D13, abs(-1));
              		write(D9, abs(-0.5));
              		write(D10, abs(0.5));
              	}"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test061NaturalLogarithm
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant 1)
                                (emit/constant 8)
                                (emit/constant 2)
                                (emit/constant 0.1931471805599453)
                                (emit/constant 9)
                                (emit/constant 3)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value 1)
                                                    (emit/prim-call "ln")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 8)
                                                    (emit/push-value 2)
                                                    (emit/prim-call "ln")
                                                    (emit/push-value 0.1931471805599453)
                                                    (emit/prim-call "subtract")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value 3)
                                                    (emit/prim-call "ln")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
              	task main() running 1/s {
              		write(D7, ln(1)); \"0\"
              		write(D8, ln(2) - 0.1931471805599453); \"0.5\"
              		write(D9, ln(3)); \"1.09\"
              	}"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test062Log10
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant 1)
                                (emit/constant 8)
                                (emit/constant 3)
                                (emit/constant 0.02287874528033756)
                                (emit/constant 9)
                                (emit/constant 10)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value 1)
                                                    (emit/prim-call "log10")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 8)
                                                    (emit/push-value 3)
                                                    (emit/prim-call "log10")
                                                    (emit/push-value 0.02287874528033756)
                                                    (emit/prim-call "add")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value 10)
                                                    (emit/prim-call "log10")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
              	task main() running 1/s {
              		write(D7, log10(1)); \"0\"
              		write(D8, log10(3) + 0.02287874528033756); \"0.5\"
              		write(D9, log10(10)); \"1\"
              	}"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test063Exp
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant -13.81551055796427)
                                (emit/constant 8)
                                (emit/constant -0.693147180559945)
                                (emit/constant 9)
                                (emit/constant 0)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value -13.81551055796427)
                                                    (emit/prim-call "exp")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 8)
                                                    (emit/push-value -0.693147180559945)
                                                    (emit/prim-call "exp")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value 0)
                                                    (emit/prim-call "exp")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
              	task main() running 1/s {
              		write(D7, exp(-13.81551055796427)); \"0\"
              		write(D8, exp(-0.693147180559945)); \"0.5\"
              		write(D9, exp(0)); \"1\"
              	}"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test064Pow10
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant -3)
                                (emit/constant 8)
                                (emit/constant -0.301)
                                (emit/constant 9)
                                (emit/constant 0)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value -3)
                                                    (emit/prim-call "pow10")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 8)
                                                    (emit/push-value -0.301)
                                                    (emit/prim-call "pow10")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value 0)
                                                    (emit/prim-call "pow10")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
              	task main() running 1/s {
              		write(D7, pow10(-3)); \"0.001\"
              		write(D8, pow10(-0.301)); \"0.5000345349769785\"
              		write(D9, pow10(0)); \"1\"
              	}"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test065IsCloseTo
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 1)
                                (emit/constant 1.00001)
                                (emit/constant 13)
                                (emit/constant 12)
                                (emit/constant 0)
                                (emit/constant 11)
                                (emit/constant 2)
                                (emit/constant 2.001)
                                (emit/constant 10)
                                (emit/constant ##Inf)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 1)
                                                    (emit/push-value 1.00001)
                                                    (emit/prim-call "isCloseTo")
                                                    (emit/jz 3)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/jmp 2)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/push-value 12)
                                                    (emit/push-value 0)
                                                    (emit/push-value 0)
                                                    (emit/prim-call "isCloseTo")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 11)
                                                    (emit/push-value 2)
                                                    (emit/push-value 2.001)
                                                    (emit/prim-call "isCloseTo")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 10)
                                                    (emit/push-value ##Inf)
                                                    (emit/push-value ##Inf)
                                                    (emit/prim-call "isCloseTo")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
              	\"D13 -> ON
              	D12 -> ON
              	D11 -> OFF
              	D10 -> ON\"
              	task main() running 1/s {
              		if isCloseTo(1, 1.00001) {
              			turnOn(D13);
              		} else {
              			turnOff(D13);
              		}

              		write(D12, isCloseTo(0, 0));
              		write(D11, isCloseTo(2, 2.001));
              		write(D10, isCloseTo(Infinity, Infinity));
              	}"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test066Asin
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant 0)
                                (emit/constant 8)
                                (emit/constant 0.48)
                                (emit/constant 9)
                                (emit/constant -1)
                                (emit/constant -1.570796326794897)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value 0)
                                                    (emit/prim-call "asin")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 8)
                                                    (emit/push-value 0.48)
                                                    (emit/prim-call "asin")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value -1)
                                                    (emit/prim-call "asin")
                                                    (emit/push-value -1.570796326794897)
                                                    (emit/prim-call "isCloseTo")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
              	task main() running 1/s {
              		write(D7, asin(0)); \"0\"
              		write(D8, asin(0.48)); \"0.500654712404588\"
              		write(D9, isCloseTo(asin(-1), -1.570796326794897)); \"1\"
              	}"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test067Acos
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant 1)
                                (emit/constant 8)
                                (emit/constant 0.8777777777)
                                (emit/constant 9)
                                (emit/constant 0)
                                (emit/constant 1.570796326794897)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value 1)
                                                    (emit/prim-call "acos")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 8)
                                                    (emit/push-value 0.8777777777)
                                                    (emit/prim-call "acos")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value 0)
                                                    (emit/prim-call "acos")
                                                    (emit/push-value 1.570796326794897)
                                                    (emit/prim-call "isCloseTo")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
              	task main() running 1/s {
              		write(D7, acos(1)); \"0\"
              		write(D8, acos(0.8777777777)); \"0.4995926612045067\"
              		write(D9, isCloseTo(acos(0), 1.570796326794897)); \"1\"
              	}"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test068Atan
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant 0)
                                (emit/constant 8)
                                (emit/constant 0.5464)
                                (emit/constant 9)
                                (emit/constant 1.58)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value 0)
                                                    (emit/prim-call "atan")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 8)
                                                    (emit/push-value 0.5464)
                                                    (emit/prim-call "atan")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value 1.58)
                                                    (emit/prim-call "atan")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
              	task main() running 1/s {
              		write(D7, atan(0)); \"0\"
              		write(D8, atan(0.5464)); \"0.5000750944782615\"
              		write(D9, atan(1.58)); \"1.006528137936965\"
              	}"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test069Power
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant 0)
                                (emit/constant 1)
                                (emit/constant 8)
                                (emit/constant 0.7071067811865475)
                                (emit/constant 2)
                                (emit/constant 9)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value 0)
                                                    (emit/push-value 1)
                                                    (emit/prim-call "power")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 8)
                                                    (emit/push-value 0.7071067811865475)
                                                    (emit/push-value 2)
                                                    (emit/prim-call "power")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value 1)
                                                    (emit/push-value 0)
                                                    (emit/prim-call "power")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
              	task main() running 1/s {
              		write(D7, 0**1); \"0\"
              		write(D8, 0.7071067811865475**2); \"0.5\"
              		write(D9, 1**0); \"1\"
              	}"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test070IsOn
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 13)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "isOn")
                                                    (emit/jz 3)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/jmp 2)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOn")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
                task main() running 1/s {
                  if isOn(D13) {
                    turnOff(D13);
                  } else {
                    turnOn(D13);
                  }
                }"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test071IsOff
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 13)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "isOff")
                                                    (emit/jz 3)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/jmp 2)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
                task main() running 1/s {
                  if isOff(D13) {
                    turnOn(D13);
                  } else {
                    turnOff(D13);
                  }
                }"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test072Mod
  (let [program (emit/program
                    :globals #{(emit/variable "a" 0)
                                (emit/constant 1000)
                                (emit/constant 3)
                                (emit/constant 0)
                                (emit/constant 13)
                                (emit/constant 1)
                                (emit/constant 12)
                                (emit/constant 2)
                                (emit/constant 11)
                                (emit/constant 10)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-global "a")
                                                    (emit/push-value 3)
                                                    (emit/prim-call "remainder")
                                                    (emit/write-global "a")
                                                    (emit/read-global "a")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 2)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/read-global "a")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 2)
                                                    (emit/push-value 12)
                                                    (emit/prim-call "toggle")
                                                    (emit/read-global "a")
                                                    (emit/push-value 2)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 2)
                                                    (emit/push-value 11)
                                                    (emit/prim-call "toggle")
                                                    (emit/read-global "a")
                                                    (emit/push-value 3)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 2)
                                                    (emit/push-value 10)
                                                    (emit/prim-call "toggle")
                                                    (emit/read-global "a")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "add")
                                                    (emit/write-global "a")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
                var a = 0;
                task main() running 1/s {
                  a = a % 3;
                  if a == 0 { toggle(D13); }
                  if a == 1 { toggle(D12); }
                  if a == 2 { toggle(D11); }
                  if a == 3 { toggle(D10); }
                  a = a + 1;
                }"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test073Constrain
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant -10)
                                (emit/constant -3)
                                (emit/constant 5)
                                (emit/constant 8)
                                (emit/constant 0.5)
                                (emit/constant 9)
                                (emit/constant 10)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value -10)
                                                    (emit/push-value -3)
                                                    (emit/push-value 5)
                                                    (emit/prim-call "constrain")
                                                    (emit/push-value -3)
                                                    (emit/prim-call "equals")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 8)
                                                    (emit/push-value 0.5)
                                                    (emit/push-value -3)
                                                    (emit/push-value 5)
                                                    (emit/prim-call "constrain")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value 10)
                                                    (emit/push-value -3)
                                                    (emit/push-value 5)
                                                    (emit/prim-call "constrain")
                                                    (emit/push-value 5)
                                                    (emit/prim-call "equals")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
                task main() running 1/s {
                  write(D7, constrain(-10, -3, 5) == -3);
                  write(D8, constrain(0.5, -3, 5));
                  write(D9, constrain(10, -3, 5) == 5);
                }"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test074RandomInt
  (let [program (emit/program
                    :globals #{(emit/variable "old" 0)
                                (emit/constant 1000)
                                (emit/constant 0)
                                (emit/constant -100000)
                                (emit/constant 100000)
                                (emit/constant 13)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals [(emit/variable "a#1" 0)]
                                    :instructions [(emit/push-value -100000)
                                                    (emit/push-value 100000)
                                                    (emit/prim-call "randomInt")
                                                    (emit/write-local "a#1")
                                                    (emit/read-local "a#1")
                                                    (emit/read-global "old")
                                                    (emit/prim-call "notEquals")
                                                    (emit/read-local "a#1")
                                                    (emit/push-value -100000)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/prim-call "logicalAnd")
                                                    (emit/read-local "a#1")
                                                    (emit/push-value 100000)
                                                    (emit/prim-call "lessThanOrEquals")
                                                    (emit/prim-call "logicalAnd")
                                                    (emit/jz 3)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/jmp 2)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/read-local "a#1")
                                                    (emit/write-global "old")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
                var old = 0;
                task main() running 1/s {
                  var a = randomInt(-100000, 100000);
                  if (a != old && a >= -100000 && a <= 100000) {
                    turnOn(D13);
                  } else {
                    turnOff(D13);
                  }
                  old = a;
                }"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test075Random
  (let [program (emit/program
                    :globals #{(emit/variable "old" 0)
                                (emit/constant 1000)
                                (emit/constant 0)
                                (emit/constant 1)
                                (emit/constant 13)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals [(emit/variable "a#1" 0)]
                                    :instructions [(emit/prim-call "random")
                                                    (emit/write-local "a#1")
                                                    (emit/read-local "a#1")
                                                    (emit/read-global "old")
                                                    (emit/prim-call "notEquals")
                                                    (emit/read-local "a#1")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/prim-call "logicalAnd")
                                                    (emit/read-local "a#1")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "lessThanOrEquals")
                                                    (emit/prim-call "logicalAnd")
                                                    (emit/jz 3)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/jmp 2)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/read-local "a#1")
                                                    (emit/write-global "old")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
                var old = 0;
                task main() running 1/s {
                  var a = random();
                  if (a != old && a >= 0 && a <= 1) {
                    turnOn(D13);
                  } else {
                    turnOff(D13);
                  }
                  old = a;
                }"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test076IsEven
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant 1)
                                (emit/constant 2)
                                (emit/constant -2)
                                (emit/constant 8)
                                (emit/constant 0.5)
                                (emit/constant 9)
                                (emit/constant 0)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value 1)
                                                    (emit/prim-call "isEven")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 2)
                                                    (emit/prim-call "isEven")
                                                    (emit/push-value -2)
                                                    (emit/prim-call "isEven")
                                                    (emit/prim-call "logicalAnd")
                                                    (emit/jz 3)
                                                    (emit/push-value 8)
                                                    (emit/push-value 0.5)
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value 0)
                                                    (emit/prim-call "isEven")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)expected (en/encode (compile-string "
              	task main() running 1/s {
              		write(D7, isEven(1));
              		if isEven(2) && isEven(-2) { write(D8, 0.5); }
              		write(D9, isEven(0));
              	}"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test077IsOdd
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant 0)
                                (emit/constant 1)
                                (emit/constant -1)
                                (emit/constant 8)
                                (emit/constant 0.5)
                                (emit/constant 9)
                                (emit/constant 3)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value 0)
                                                    (emit/prim-call "isOdd")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "isOdd")
                                                    (emit/push-value -1)
                                                    (emit/prim-call "isOdd")
                                                    (emit/prim-call "logicalAnd")
                                                    (emit/jz 3)
                                                    (emit/push-value 8)
                                                    (emit/push-value 0.5)
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value 3)
                                                    (emit/prim-call "isOdd")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
                task main() running 1/s {
                  write(D7, isOdd(0));
                  if isOdd(1) && isOdd(-1) { write(D8, 0.5); }
                  write(D9, isOdd(3));
                }"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test078IsPrime
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant 9)
                                (emit/constant 2)
                                (emit/constant 3)
                                (emit/constant 8)
                                (emit/constant 0.5)
                                (emit/constant 5)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value 9)
                                                    (emit/prim-call "isPrime")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 2)
                                                    (emit/prim-call "isPrime")
                                                    (emit/push-value 3)
                                                    (emit/prim-call "isPrime")
                                                    (emit/prim-call "logicalAnd")
                                                    (emit/jz 3)
                                                    (emit/push-value 8)
                                                    (emit/push-value 0.5)
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value 5)
                                                    (emit/prim-call "isPrime")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
                task main() running 1/s {
                  write(D7, isPrime(9));
                  if isPrime(2) && isPrime(3) { write(D8, 0.5); }
                  write(D9, isPrime(5));
                }"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test079IsWhole
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant 9.5)
                                (emit/constant 0)
                                (emit/constant 100000)
                                (emit/constant 8)
                                (emit/constant 0.5)
                                (emit/constant 9)
                                (emit/constant -10)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value 9.5)
                                                    (emit/prim-call "isWhole")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "isWhole")
                                                    (emit/push-value 100000)
                                                    (emit/prim-call "isWhole")
                                                    (emit/prim-call "logicalAnd")
                                                    (emit/jz 3)
                                                    (emit/push-value 8)
                                                    (emit/push-value 0.5)
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value -10)
                                                    (emit/prim-call "isWhole")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
                task main() running 1/s {
                  write(D7, isWhole(9.5));
                  if isWhole(0) && isWhole(100000) { write(D8, 0.5); }
                  write(D9, isWhole(-10));
                }"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test080IsPositive
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant -10)
                                (emit/constant 10)
                                (emit/constant 100000)
                                (emit/constant 8)
                                (emit/constant 0.5)
                                (emit/constant 9)
                                (emit/constant 0)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value -10)
                                                    (emit/prim-call "isPositive")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 10)
                                                    (emit/prim-call "isPositive")
                                                    (emit/push-value 100000)
                                                    (emit/prim-call "isPositive")
                                                    (emit/prim-call "logicalAnd")
                                                    (emit/jz 3)
                                                    (emit/push-value 8)
                                                    (emit/push-value 0.5)
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value 0)
                                                    (emit/prim-call "isPositive")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
                task main() running 1/s {
                  write(D7, isPositive(-10));
                  if isPositive(10) && isPositive(100000) { write(D8, 0.5); }
                  write(D9, isPositive(0));
                }"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test081IsNegative
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant 0)
                                (emit/constant -10)
                                (emit/constant -0.54534)
                                (emit/constant 8)
                                (emit/constant 0.5)
                                (emit/constant 9)
                                (emit/constant -1)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value 0)
                                                    (emit/prim-call "isNegative")
                                                    (emit/prim-call "write")
                                                    (emit/push-value -10)
                                                    (emit/prim-call "isNegative")
                                                    (emit/push-value -0.54534)
                                                    (emit/prim-call "isNegative")
                                                    (emit/prim-call "logicalAnd")
                                                    (emit/jz 3)
                                                    (emit/push-value 8)
                                                    (emit/push-value 0.5)
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value -1)
                                                    (emit/prim-call "isNegative")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
                task main() running 1/s {
                  write(D7, isNegative(0));
                  if isNegative(-10) && isNegative(-0.54534) { write(D8, 0.5); }
                  write(D9, isNegative(-1));
                }"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test082IsDivisibleBy
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 7)
                                (emit/constant 9)
                                (emit/constant 5)
                                (emit/constant 1)
                                (emit/constant -15)
                                (emit/constant -3)
                                (emit/constant 8)
                                (emit/constant 0.5)
                                (emit/constant 64)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/push-value 9)
                                                    (emit/push-value 5)
                                                    (emit/prim-call "isDivisibleBy")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 5)
                                                    (emit/push-value 1)
                                                    (emit/prim-call "isDivisibleBy")
                                                    (emit/push-value -15)
                                                    (emit/push-value -3)
                                                    (emit/prim-call "isDivisibleBy")
                                                    (emit/prim-call "logicalAnd")
                                                    (emit/jz 3)
                                                    (emit/push-value 8)
                                                    (emit/push-value 0.5)
                                                    (emit/prim-call "write")
                                                    (emit/push-value 9)
                                                    (emit/push-value 64)
                                                    (emit/push-value 8)
                                                    (emit/prim-call "isDivisibleBy")
                                                    (emit/prim-call "write")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
                task main() running 1/s {
                  write(D7, isDivisibleBy(9, 5));
                  if isDivisibleBy(5, 1) && isDivisibleBy(-15, -3) { write(D8, 0.5); }
                  write(D9, isDivisibleBy(64, 8));
                }"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test083DelayS
  (let [program (emit/program
                    :globals #{(emit/constant 100)
                                (emit/constant 1)}
                    :scripts [(emit/script
                                    :name "delayS"
                                    :running? true
                                    :delay 100
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/turn-on-pin 13)
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayS")
                                                    (emit/turn-off-pin 13)])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test084DelayM
  (let [program (emit/program
                    :globals #{(emit/constant 100)
                                (emit/constant 1)}
                    :scripts [(emit/script
                                    :name "delayS"
                                    :running? true
                                    :delay 100
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/turn-on-pin 13)
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayM")
                                                    (emit/turn-off-pin 13)])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test085Minutes
  (let [program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 1)
                                (emit/constant 13)
                                (emit/constant 2)
                                (emit/constant 3)
                                (emit/constant 4)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/prim-call "minutes")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz -4)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/prim-call "minutes")
                                                    (emit/push-value 2)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz -4)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/prim-call "minutes")
                                                    (emit/push-value 3)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz -4)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/prim-call "minutes")
                                                    (emit/push-value 4)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz -4)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
                task main() running {
                  until minutes() >= 1;
                  turnOn(D13);
                  until minutes() >= 2;
                  turnOff(D13);
                  until minutes() >= 3;
                  turnOn(D13);
                  until minutes() >= 4;
                  turnOff(D13);
                }"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test086Seconds
  (let [program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 1)
                                (emit/constant 13)
                                (emit/constant 2)
                                (emit/constant 3)
                                (emit/constant 4)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/prim-call "seconds")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz -4)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/prim-call "seconds")
                                                    (emit/push-value 2)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz -4)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/prim-call "seconds")
                                                    (emit/push-value 3)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz -4)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/prim-call "seconds")
                                                    (emit/push-value 4)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz -4)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
                task main() running {
                  until seconds() >= 1;
                  turnOn(D13);
                  until seconds() >= 2;
                  turnOff(D13);
                  until seconds() >= 3;
                  turnOn(D13);
                  until seconds() >= 4;
                  turnOff(D13);
                }"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test087Millis
  (let [program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 1000)
                                (emit/constant 13)
                                (emit/constant 2000)
                                (emit/constant 3000)
                                (emit/constant 4000)}
                    :scripts [(emit/script
                                    :name "main"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/prim-call "millis")
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz -4)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/prim-call "millis")
                                                    (emit/push-value 2000)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz -4)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/prim-call "millis")
                                                    (emit/push-value 3000)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz -4)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/prim-call "millis")
                                                    (emit/push-value 4000)
                                                    (emit/prim-call "greaterThanOrEquals")
                                                    (emit/jz -4)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
                task main() running {
                  until millis() >= 1000;
                  turnOn(D13);
                  until millis() >= 2000;
                  turnOff(D13);
                  until millis() >= 3000;
                  turnOn(D13);
                  until millis() >= 4000;
                  turnOff(D13);
                }"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test088ScriptCallOverridingPrimitive
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 13)
                                (emit/constant 0)}
                    :scripts [(emit/script
                                    :name "blink"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/push-value 0)
                                                    (emit/script-call "toggle")
                                                    (emit/prim-call "pop")])
                                (emit/script
                                    :name "toggle"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "pin#1" 0)
                                                (emit/variable "delay#2" 0)]
                                    :locals []
                                    :instructions [(emit/read-local "pin#1")
                                                    (emit/prim-call "read")
                                                    (emit/jz 3)
                                                    (emit/read-local "pin#1")
                                                    (emit/prim-call "turnOff")
                                                    (emit/jmp 2)
                                                    (emit/read-local "pin#1")
                                                    (emit/prim-call "turnOn")
                                                    (emit/read-local "delay#2")
                                                    (emit/prim-call "delayMs")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
              task blink() running 1/s { toggle(D13, 0); }

              proc toggle(pin, delay)  {
                if read(pin) { turnOff(pin); }
                else { turnOn(pin); }
                delayMs(delay);
              }"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test089DebuggerBreakpointHaltsAllScripts
  (let [program (emit/program
                    :globals #{(emit/constant 1000)
                                (emit/constant 11)
                                (emit/constant 0)
                                (emit/constant 13)}
                    :scripts [(emit/script
                                    :name "blink11"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 11)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "blink13"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "delayMs")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
              task blink11() running 1/s {
                toggle(D11);
              }

              task blink13() running {
                turnOn(D13);
                delayMs(1000);
                turnOff(D13);
                delayMs(1000);
              }"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test090DebuggerBreakpointHaltsAreDeterministic
  (let [program (emit/program
                    :globals #{(emit/variable "a" 0)
                                (emit/constant 0)
                                (emit/constant 7)
                                (emit/constant 13)
                                (emit/constant 10)
                                (emit/constant 0.01)
                                (emit/constant 1)
                                (emit/constant 11)
                                (emit/constant 9)}
                    :scripts [(emit/script
                                    :name "meta"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 7)
                                                    (emit/prim-call "read")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "greaterThan")
                                                    (emit/jz 2)
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOn")])
                                (emit/script
                                    :name "increment"
                                    :running? true
                                    :delay 10
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-global "a")
                                                    (emit/push-value 0.01)
                                                    (emit/prim-call "add")
                                                    (emit/write-global "a")
                                                    (emit/read-global "a")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "greaterThan")
                                                    (emit/jz 2)
                                                    (emit/push-value 0)
                                                    (emit/write-global "a")])
                                (emit/script
                                    :name "blink11"
                                    :running? true
                                    :delay 1
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 11)
                                                    (emit/prim-call "toggle")])
                                (emit/script
                                    :name "test"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 9)
                                                    (emit/read-global "a")
                                                    (emit/prim-call "write")
                                                    (emit/push-value 7)
                                                    (emit/push-value 0)
                                                    (emit/prim-call "write")])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test091ChangingTheProgramResetsTheVMState
  (let [program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)
                                (emit/constant 1000)}
                    :scripts [(emit/script
                                    :name "blink13"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "turnOn")
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "turnOff")
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "delayMs")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
              task blink13() running {
                turnOn(D13);
                delayMs(1000);
                turnOff(D13);
                delayMs(1000);
              }"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test092DebuggerSetAllBreakpoints
  (let [program (emit/program
                    :globals #{(emit/constant 0)}
                    :scripts [(emit/script
                                    :name "test"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/turn-on-pin 13)
                                                    (emit/turn-on-pin 11)
                                                    (emit/turn-off-pin 11)
                                                    (emit/turn-off-pin 13)])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test093DebuggerSetAllBreakpointsWithMultipleScripts
  (let [program (emit/program
                    :globals #{(emit/constant 0)}
                    :scripts [(emit/script
                                    :name "test1"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/turn-on-pin 13)
                                                    (emit/turn-on-pin 11)])
                                (emit/script
                                    :name "test2"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/turn-off-pin 11)
                                                    (emit/turn-off-pin 13)])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test094ProgramWithMultipleImports
  (let [program (emit/program
                    :globals #{(emit/variable "sonar.trigPin" 0)
                                (emit/variable "sonar.echoPin" 0)
                                (emit/variable "sonar.maxDistance" 100)
                                (emit/variable "sonar.distance" 0)
                                (emit/variable "leftMotor.enablePin" 0)
                                (emit/variable "leftMotor.forwardPin" 0)
                                (emit/variable "leftMotor.reversePin" 0)
                                (emit/variable "rightMotor.enablePin" 0)
                                (emit/variable "rightMotor.forwardPin" 0)
                                (emit/variable "rightMotor.reversePin" 0)
                                (emit/constant 0)
                                (emit/constant 100)
                                (emit/constant 19)
                                (emit/constant 18)
                                (emit/constant 200)
                                (emit/constant 5)
                                (emit/constant 7)
                                (emit/constant 8)
                                (emit/constant 6)
                                (emit/constant 11)
                                (emit/constant 9)
                                (emit/constant 10)
                                (emit/constant 1)
                                (emit/constant 45)
                                (emit/constant 0.5)
                                (emit/constant 1000)
                                (emit/constant 13)}
                    :scripts [(emit/script
                                    :name "sonar.init"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "trig#1" 0)
                                                (emit/variable "echo#2" 0)
                                                (emit/variable "maxDist#3" 0)]
                                    :locals []
                                    :instructions [(emit/read-local "trig#1")
                                                    (emit/write-global "sonar.trigPin")
                                                    (emit/read-local "echo#2")
                                                    (emit/write-global "sonar.echoPin")
                                                    (emit/read-local "maxDist#3")
                                                    (emit/write-global "sonar.maxDistance")])
                                (emit/script
                                    :name "sonar.reading"
                                    :running? false
                                    :delay 100
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-global "sonar.trigPin")
                                                    (emit/read-global "sonar.echoPin")
                                                    (emit/read-global "sonar.maxDistance")
                                                    (emit/prim-call "sonarDistCm")
                                                    (emit/write-global "sonar.distance")])
                                (emit/script
                                    :name "sonar.distance_cm"
                                    :running? false
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/read-global "sonar.distance")
                                                    (emit/prim-call "retv")])
                                (emit/script
                                    :name "leftMotor.init"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "en#4" 0)
                                                (emit/variable "f#5" 0)
                                                (emit/variable "r#6" 0)]
                                    :locals []
                                    :instructions [(emit/read-local "en#4")
                                                    (emit/write-global "leftMotor.enablePin")
                                                    (emit/read-local "f#5")
                                                    (emit/write-global "leftMotor.forwardPin")
                                                    (emit/read-local "r#6")
                                                    (emit/write-global "leftMotor.reversePin")])
                                (emit/script
                                    :name "leftMotor.forward"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "speed#7" 0)]
                                    :locals []
                                    :instructions [(emit/read-global "leftMotor.reversePin")
                                                    (emit/prim-call "turnOff")
                                                    (emit/read-global "leftMotor.forwardPin")
                                                    (emit/prim-call "turnOn")
                                                    (emit/read-global "leftMotor.enablePin")
                                                    (emit/read-local "speed#7")
                                                    (emit/prim-call "write")])
                                (emit/script
                                    :name "leftMotor.backward"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "speed#8" 0)]
                                    :locals []
                                    :instructions [(emit/read-global "leftMotor.forwardPin")
                                                    (emit/prim-call "turnOff")
                                                    (emit/read-global "leftMotor.reversePin")
                                                    (emit/prim-call "turnOn")
                                                    (emit/read-global "leftMotor.enablePin")
                                                    (emit/read-local "speed#8")
                                                    (emit/prim-call "write")])
                                (emit/script
                                    :name "rightMotor.init"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "en#9" 0)
                                                (emit/variable "f#10" 0)
                                                (emit/variable "r#11" 0)]
                                    :locals []
                                    :instructions [(emit/read-local "en#9")
                                                    (emit/write-global "rightMotor.enablePin")
                                                    (emit/read-local "f#10")
                                                    (emit/write-global "rightMotor.forwardPin")
                                                    (emit/read-local "r#11")
                                                    (emit/write-global "rightMotor.reversePin")])
                                (emit/script
                                    :name "rightMotor.forward"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "speed#12" 0)]
                                    :locals []
                                    :instructions [(emit/read-global "rightMotor.reversePin")
                                                    (emit/prim-call "turnOff")
                                                    (emit/read-global "rightMotor.forwardPin")
                                                    (emit/prim-call "turnOn")
                                                    (emit/read-global "rightMotor.enablePin")
                                                    (emit/read-local "speed#12")
                                                    (emit/prim-call "write")])
                                (emit/script
                                    :name "rightMotor.backward"
                                    :running? false
                                    :delay 0
                                    :arguments [(emit/variable "speed#13" 0)]
                                    :locals []
                                    :instructions [(emit/read-global "rightMotor.forwardPin")
                                                    (emit/prim-call "turnOff")
                                                    (emit/read-global "rightMotor.reversePin")
                                                    (emit/prim-call "turnOn")
                                                    (emit/read-global "rightMotor.enablePin")
                                                    (emit/read-local "speed#13")
                                                    (emit/prim-call "write")])
                                (emit/script
                                    :name "setup"
                                    :running? true
                                    :once? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 19)
                                                    (emit/push-value 18)
                                                    (emit/push-value 200)
                                                    (emit/script-call "sonar.init")
                                                    (emit/prim-call "pop")
                                                    (emit/start "sonar.reading")
                                                    (emit/push-value 5)
                                                    (emit/push-value 7)
                                                    (emit/push-value 8)
                                                    (emit/script-call "leftMotor.init")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 6)
                                                    (emit/push-value 11)
                                                    (emit/push-value 9)
                                                    (emit/script-call "rightMotor.init")
                                                    (emit/prim-call "pop")])
                                (emit/script
                                    :name "move"
                                    :running? true
                                    :delay 10
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/script-call "sonar.distance_cm")
                                                    (emit/push-value 0)
                                                    (emit/prim-call "equals")
                                                    (emit/jz 7)
                                                    (emit/push-value 1)
                                                    (emit/script-call "leftMotor.forward")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 1)
                                                    (emit/script-call "rightMotor.forward")
                                                    (emit/prim-call "pop")
                                                    (emit/jmp 53)
                                                    (emit/script-call "sonar.distance_cm")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "greaterThan")
                                                    (emit/jz 7)
                                                    (emit/push-value 1)
                                                    (emit/script-call "leftMotor.forward")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 1)
                                                    (emit/script-call "rightMotor.forward")
                                                    (emit/prim-call "pop")
                                                    (emit/jmp 42)
                                                    (emit/script-call "sonar.distance_cm")
                                                    (emit/push-value 45)
                                                    (emit/prim-call "greaterThan")
                                                    (emit/jz 7)
                                                    (emit/push-value 0.5)
                                                    (emit/script-call "leftMotor.forward")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 0.5)
                                                    (emit/script-call "rightMotor.forward")
                                                    (emit/prim-call "pop")
                                                    (emit/jmp 31)
                                                    (emit/prim-call "random")
                                                    (emit/push-value 0.5)
                                                    (emit/prim-call "lessThan")
                                                    (emit/jz 14)
                                                    (emit/script-call "sonar.distance_cm")
                                                    (emit/push-value 45)
                                                    (emit/prim-call "lessThan")
                                                    (emit/jz 9)
                                                    (emit/push-value 0.5)
                                                    (emit/script-call "leftMotor.forward")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 0.5)
                                                    (emit/script-call "rightMotor.backward")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "delayMs")
                                                    (emit/jmp -13)
                                                    (emit/jmp 13)
                                                    (emit/script-call "sonar.distance_cm")
                                                    (emit/push-value 45)
                                                    (emit/prim-call "lessThan")
                                                    (emit/jz 9)
                                                    (emit/push-value 0.5)
                                                    (emit/script-call "rightMotor.forward")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 0.5)
                                                    (emit/script-call "leftMotor.backward")
                                                    (emit/prim-call "pop")
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "delayMs")
                                                    (emit/jmp -13)])
                                (emit/script
                                    :name "blink13"
                                    :running? true
                                    :delay 1000
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")])])
        actual (en/encode program)
        expected (en/encode (compile-string "
              import sonar from 'Sonar.uzi';
              import leftMotor from 'DCMotor.uzi';
              import rightMotor from 'DCMotor.uzi';

              task setup() {
                sonar.init(trig: A5, echo: A4, maxDist: 200);
                start sonar.reading;
                leftMotor.init(en: D5, f: D7, r: D8);
                rightMotor.init(en: D6, f: D11, r: D9);
              }

              task move() running 100/s {
                if (sonar.distance_cm() == 0) {
                  leftMotor.forward(speed: 1);
                  rightMotor.forward(speed: 1);
                } else {
                  if (sonar.distance_cm() > 100) {
                    leftMotor.forward(speed: 1);
                    rightMotor.forward(speed: 1);
                  } else {
                    if (sonar.distance_cm() > 45) {
                      leftMotor.forward(speed: 0.5);
                      rightMotor.forward(speed: 0.5);
                    } else {
                      if (random() < 0.5) {
                        while (sonar.distance_cm() < 45) {
                          leftMotor.forward(speed: 0.5);
                          rightMotor.backward(speed: 0.5);
                          delayMs(1000);
                        }
                      } else {
                        while (sonar.distance_cm() < 45) {
                          rightMotor.forward(speed: 0.5);
                          leftMotor.backward(speed: 0.5);
                          delayMs(1000);
                        }
                      }
                    }
                  }
                }
              }

              task blink13() running 1/s {
                toggle(D13);
              }"))]
    (is (= expected actual))
    (write-file program)))

(deftest Test095ScriptWith127Instructions
  (let [program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)
                                (emit/constant 100)
                                (emit/constant 1000)}
                    :scripts [(emit/script
                                    :name "test"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 1000)
                                                    (emit/prim-call "delayMs")
                                                    (emit/resume "test")])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test096ScriptWith128Instructions
  (let [program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)
                                (emit/constant 100)}
                    :scripts [(emit/script
                                    :name "test"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test097ScriptWith512Instructions
  (let [program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)
                                (emit/constant 100)}
                    :scripts [(emit/script
                                    :name "test"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 100)
                                                    (emit/prim-call "delayMs")])])
        actual (en/encode program)]
    (write-file program)))

(deftest Test098criptWith255Instructions
  (let [program (emit/program
                    :globals #{(emit/constant 0)
                                (emit/constant 13)
                                (emit/constant 1)}
                    :scripts [(emit/script
                                    :name "test"
                                    :running? true
                                    :delay 0
                                    :arguments []
                                    :locals []
                                    :instructions [(emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/push-value 1)
                                                    (emit/prim-call "delayMs")
                                                    (emit/push-value 13)
                                                    (emit/prim-call "toggle")
                                                    (emit/resume "test")])])
        actual (en/encode program)]
    (write-file program)))
