#pragma once

#include "Reader.h"

enum Opcode
{
	TURN_ON, TURN_OFF, WRITE_PIN, READ_PIN,
	READ_GLOBAL, WRITE_GLOBAL,
	SCRIPT_CALL,
	SCRIPT_START, SCRIPT_STOP,
	SCRIPT_PAUSE, SCRIPT_RESUME,
	READ_LOCAL, WRITE_LOCAL,

	JMP, JZ, JNZ, JLTE, 
	PRIM_JMP, PRIM_JZ, PRIM_JNZ, PRIM_JLTE,
	
	/* 
	HACK(Richo) : We're dangerously close to the program space limit, so to make space
	I commented the following instructions (which weren't currently being generated by 
	the compiler anyway and were meant to be used as a future optimization): 
	*/
	// JNE, JLT, JGT, JGTE, 

	PRIM_READ_PIN, PRIM_WRITE_PIN, 
	PRIM_SERVO_WRITE, 
	PRIM_MULTIPLY, PRIM_ADD, PRIM_DIVIDE, PRIM_SUBTRACT,
	PRIM_MILLIS,
	PRIM_EQ, PRIM_NEQ, PRIM_GT, PRIM_GTEQ, PRIM_LT, PRIM_LTEQ,
	PRIM_NEGATE,
	PRIM_SIN, PRIM_COS, PRIM_TAN,
	PRIM_YIELD, PRIM_DELAY_MILLIS,
	PRIM_RET, PRIM_POP, PRIM_RETV,
	PRIM_COROUTINE,
	PRIM_LOGICAL_AND, PRIM_LOGICAL_OR,
	PRIM_BITWISE_AND, PRIM_BITWISE_OR,
	PRIM_SERIAL_WRITE,
	PRIM_ROUND, PRIM_CEIL, PRIM_FLOOR,
	PRIM_SQRT, PRIM_ABS,
	PRIM_LN, PRIM_LOG10, PRIM_EXP, PRIM_POW10,
	PRIM_ASIN, PRIM_ACOS, PRIM_ATAN, PRIM_ATAN2,
	PRIM_POWER,
	PRIM_REMAINDER,
	PRIM_RANDOM_INT, PRIM_RANDOM,
	PRIM_SONAR_DIST_CM,
	PRIM_MATRIX_8x8_DISPLAY,
	PRIM_TONE, PRIM_NO_TONE,
	PRIM_GET_PIN_MODE, PRIM_SET_PIN_MODE,

	PRIM_LCD_INIT0, PRIM_LCD_INIT1, PRIM_LCD_PRINT_VALUE,
	PRIM_ARRAY_INIT, PRIM_ARRAY_GET, PRIM_ARRAY_SET,
};

struct Instruction
{	
	uint8 opcode; // INFO(Richo): Originally an Opcode, but changed to uint8 to save 1 byte.
	uint8 data; // INFO(Richo): The msb is used as a breakpoint flag, the argument is stored as a 7-bit signed int
};

void readInstruction(Reader* rs, Instruction* instruction, bool& timeout);

void setBreakpoint(Instruction* instruction, bool value);
bool getBreakpoint(Instruction* instruction);
int8 getArgument(Instruction* instruction);
