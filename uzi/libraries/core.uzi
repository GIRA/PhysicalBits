"Declaration of core primitives"
prim read;
prim write;
prim getPinMode;
prim setPinMode;
prim servoWrite;
prim + : add;
prim - : subtract;
prim * : multiply;
prim / : divide;
prim sin;
prim cos;
prim tan;
prim == : equals;
prim != : notEquals;
prim > : greaterThan;
prim >= : greaterThanOrEquals;
prim < : lessThan;
prim <= : lessThanOrEquals;
prim ! : negate;
prim delayMs;
prim & : bitwiseAnd;
prim | : bitwiseOr;
prim millis;
prim coroutine;
prim serialWrite;
prim round;
prim ceil;
prim floor;
prim sqrt;
prim abs;
prim ln;
prim log10;
prim exp;
prim pow10;
prim asin;
prim acos;
prim atan;
prim atan2;
prim ** : power;
prim % : remainder;
prim randomInt;
prim random;
prim startTone : tone;
prim stopTone : noTone;
prim strlen : string_length;

proc turnOn(pin) {
  write(pin, 1);
}

proc turnOff(pin) {
  write(pin, 0);
}

proc toggle(pin) {
  write(pin, 1 - read(pin));
}

func getServoDegrees(pin) {
  return read(pin) * 180;
}

proc setServoDegrees(pin, deg) {
  servoWrite(pin, deg / 180);
}

func isOn(pin) {
  return read(pin) > 0;
}

func isOff(pin) {
  return read(pin) == 0;
}

func constrain(a, b, c) {
  if a < b { return b; }
  if a > c { return c; }
  return a;
}

func isEven(a) {
  return a % 2 == 0;
}

func isOdd(a) {
  return a % 2 != 0;
}

func isPrime(a) {
  if a != floor(a) { return 0; }
  if a <= 1 { return 0; }
  if a % 2 == 0 { return a == 2; }
  for i = 3 to sqrt(a) by 2 {
    if a % i == 0 { return 0; }
  }
  return 1;
}

func isWhole(a) {
  return a == floor(a);
}

func isPositive(a) {
  return a >= 0;
}

func isNegative(a) {
  return a < 0;
}

func isDivisibleBy(a, b) {
  if b == 0 { return 0; }
  if b != floor(b) { return 0; }
  return a % b == 0;
}

func seconds() {
  return millis() / 1000;
}

func isCloseTo(a, b) {
  var epsilon = 0.0001;
  if a == 0 { return b < epsilon; }
  if b == 0 { return a < epsilon; }
  if a == b { return 1; }
  var a_abs = abs(a);
  var b_abs = abs(b);
  var max;
  if a_abs > b_abs { 
    max = a_abs; 
  } else { 
    max = b_abs; 
  }
  return abs(a - b) / max < epsilon;
}

proc delayS(seconds) {
  delayMs(seconds * 1000);
}

proc delayM(minutes) {
  delayMs(minutes * 60 * 1000);
}

func minutes() {
  return millis() / 1000 / 60;
}

func mod(a, n) {
  return a - (floor(a / n) * n);
}

proc playTone(pin, tone, ms) {
  startTone(pin, tone);
  delayMs(ms);
  stopTone(pin);
}

proc stopToneAndWait(pin, ms) {
  stopTone(pin);
  delayMs(ms);
}

func map(value, fromLow, fromHigh, toLow, toHigh) {
  return (value - fromLow) * (toHigh - toLow) / (fromHigh - fromLow) + toLow;
}

func isBetween(value, min, max) {
  return value >= min && value <= max;
}

"The following NOP functions were added for consistency between the casting
blocks and the 'Uzi syntax' mode. Normally, they shouldn't be used as they
increase code size with no reason (at least until I implement inlining)."
"TODO(Richo): Implement inlining"
func pin(value) { return value; }
func number(value) { return value; }
func bool(value) { return value; }
