var debounceMs = 50;

func isPressed(pin) { return isOn(pin); }
func isReleased(pin) { return isOff(pin); }

proc waitForRelease(pin) {
	until isPressed(pin);
	delayMs(debounceMs);
	until isReleased(pin);
	delayMs(debounceMs);
}

proc waitForPress(pin) {
	until isReleased(pin);
	delayMs(debounceMs);
	until isPressed(pin);
	delayMs(debounceMs);
}

func millisecondsHolding(pin) {
	until isPressed(pin);
	var begin = millis();
	delayMs(debounceMs);
	until isReleased(pin);
	delayMs(debounceMs);
	return millis() - begin;
}

proc waitForHoldAndRelease(pin, ms) {
	until millisecondsHolding(pin) >= ms;
}

proc waitForHold(pin, ms) {
	forever {
		until isReleased(pin);
		delayMs(debounceMs);
		until isPressed(pin);
		var begin = millis();
		while isPressed(pin) {
			if millis() - begin >= ms { return; }
		}
	}
}
